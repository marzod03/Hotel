
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model administrador
 * 
 */
export type administrador = $Result.DefaultSelection<Prisma.$administradorPayload>
/**
 * Model cliente
 * 
 */
export type cliente = $Result.DefaultSelection<Prisma.$clientePayload>
/**
 * Model habitacion
 * 
 */
export type habitacion = $Result.DefaultSelection<Prisma.$habitacionPayload>
/**
 * Model imagenhotel
 * 
 */
export type imagenhotel = $Result.DefaultSelection<Prisma.$imagenhotelPayload>
/**
 * Model promocion
 * 
 */
export type promocion = $Result.DefaultSelection<Prisma.$promocionPayload>
/**
 * Model reserva
 * 
 */
export type reserva = $Result.DefaultSelection<Prisma.$reservaPayload>
/**
 * Model reservahabitacion
 * 
 */
export type reservahabitacion = $Result.DefaultSelection<Prisma.$reservahabitacionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Administradors
 * const administradors = await prisma.administrador.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Administradors
   * const administradors = await prisma.administrador.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.administrador`: Exposes CRUD operations for the **administrador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administradors
    * const administradors = await prisma.administrador.findMany()
    * ```
    */
  get administrador(): Prisma.administradorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.clienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.habitacion`: Exposes CRUD operations for the **habitacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habitacions
    * const habitacions = await prisma.habitacion.findMany()
    * ```
    */
  get habitacion(): Prisma.habitacionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.imagenhotel`: Exposes CRUD operations for the **imagenhotel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagenhotels
    * const imagenhotels = await prisma.imagenhotel.findMany()
    * ```
    */
  get imagenhotel(): Prisma.imagenhotelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promocion`: Exposes CRUD operations for the **promocion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promocions
    * const promocions = await prisma.promocion.findMany()
    * ```
    */
  get promocion(): Prisma.promocionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reserva`: Exposes CRUD operations for the **reserva** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservas
    * const reservas = await prisma.reserva.findMany()
    * ```
    */
  get reserva(): Prisma.reservaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reservahabitacion`: Exposes CRUD operations for the **reservahabitacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservahabitacions
    * const reservahabitacions = await prisma.reservahabitacion.findMany()
    * ```
    */
  get reservahabitacion(): Prisma.reservahabitacionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    administrador: 'administrador',
    cliente: 'cliente',
    habitacion: 'habitacion',
    imagenhotel: 'imagenhotel',
    promocion: 'promocion',
    reserva: 'reserva',
    reservahabitacion: 'reservahabitacion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "administrador" | "cliente" | "habitacion" | "imagenhotel" | "promocion" | "reserva" | "reservahabitacion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      administrador: {
        payload: Prisma.$administradorPayload<ExtArgs>
        fields: Prisma.administradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.administradorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.administradorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          findFirst: {
            args: Prisma.administradorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.administradorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          findMany: {
            args: Prisma.administradorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>[]
          }
          create: {
            args: Prisma.administradorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          createMany: {
            args: Prisma.administradorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.administradorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          update: {
            args: Prisma.administradorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          deleteMany: {
            args: Prisma.administradorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.administradorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.administradorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$administradorPayload>
          }
          aggregate: {
            args: Prisma.AdministradorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdministrador>
          }
          groupBy: {
            args: Prisma.administradorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdministradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.administradorCountArgs<ExtArgs>
            result: $Utils.Optional<AdministradorCountAggregateOutputType> | number
          }
        }
      }
      cliente: {
        payload: Prisma.$clientePayload<ExtArgs>
        fields: Prisma.clienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          findFirst: {
            args: Prisma.clienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          findMany: {
            args: Prisma.clienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>[]
          }
          create: {
            args: Prisma.clienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          createMany: {
            args: Prisma.clienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          update: {
            args: Prisma.clienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          deleteMany: {
            args: Prisma.clienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.clienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.clienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      habitacion: {
        payload: Prisma.$habitacionPayload<ExtArgs>
        fields: Prisma.habitacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.habitacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.habitacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          findFirst: {
            args: Prisma.habitacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.habitacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          findMany: {
            args: Prisma.habitacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>[]
          }
          create: {
            args: Prisma.habitacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          createMany: {
            args: Prisma.habitacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.habitacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          update: {
            args: Prisma.habitacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          deleteMany: {
            args: Prisma.habitacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.habitacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.habitacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$habitacionPayload>
          }
          aggregate: {
            args: Prisma.HabitacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabitacion>
          }
          groupBy: {
            args: Prisma.habitacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabitacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.habitacionCountArgs<ExtArgs>
            result: $Utils.Optional<HabitacionCountAggregateOutputType> | number
          }
        }
      }
      imagenhotel: {
        payload: Prisma.$imagenhotelPayload<ExtArgs>
        fields: Prisma.imagenhotelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagenhotelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagenhotelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          findFirst: {
            args: Prisma.imagenhotelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagenhotelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          findMany: {
            args: Prisma.imagenhotelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>[]
          }
          create: {
            args: Prisma.imagenhotelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          createMany: {
            args: Prisma.imagenhotelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.imagenhotelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          update: {
            args: Prisma.imagenhotelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          deleteMany: {
            args: Prisma.imagenhotelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.imagenhotelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.imagenhotelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagenhotelPayload>
          }
          aggregate: {
            args: Prisma.ImagenhotelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImagenhotel>
          }
          groupBy: {
            args: Prisma.imagenhotelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImagenhotelGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagenhotelCountArgs<ExtArgs>
            result: $Utils.Optional<ImagenhotelCountAggregateOutputType> | number
          }
        }
      }
      promocion: {
        payload: Prisma.$promocionPayload<ExtArgs>
        fields: Prisma.promocionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.promocionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.promocionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          findFirst: {
            args: Prisma.promocionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.promocionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          findMany: {
            args: Prisma.promocionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>[]
          }
          create: {
            args: Prisma.promocionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          createMany: {
            args: Prisma.promocionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.promocionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          update: {
            args: Prisma.promocionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          deleteMany: {
            args: Prisma.promocionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.promocionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.promocionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promocionPayload>
          }
          aggregate: {
            args: Prisma.PromocionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromocion>
          }
          groupBy: {
            args: Prisma.promocionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromocionGroupByOutputType>[]
          }
          count: {
            args: Prisma.promocionCountArgs<ExtArgs>
            result: $Utils.Optional<PromocionCountAggregateOutputType> | number
          }
        }
      }
      reserva: {
        payload: Prisma.$reservaPayload<ExtArgs>
        fields: Prisma.reservaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reservaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reservaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          findFirst: {
            args: Prisma.reservaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reservaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          findMany: {
            args: Prisma.reservaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>[]
          }
          create: {
            args: Prisma.reservaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          createMany: {
            args: Prisma.reservaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reservaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          update: {
            args: Prisma.reservaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          deleteMany: {
            args: Prisma.reservaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reservaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reservaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservaPayload>
          }
          aggregate: {
            args: Prisma.ReservaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReserva>
          }
          groupBy: {
            args: Prisma.reservaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservaGroupByOutputType>[]
          }
          count: {
            args: Prisma.reservaCountArgs<ExtArgs>
            result: $Utils.Optional<ReservaCountAggregateOutputType> | number
          }
        }
      }
      reservahabitacion: {
        payload: Prisma.$reservahabitacionPayload<ExtArgs>
        fields: Prisma.reservahabitacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reservahabitacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reservahabitacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          findFirst: {
            args: Prisma.reservahabitacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reservahabitacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          findMany: {
            args: Prisma.reservahabitacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>[]
          }
          create: {
            args: Prisma.reservahabitacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          createMany: {
            args: Prisma.reservahabitacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reservahabitacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          update: {
            args: Prisma.reservahabitacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          deleteMany: {
            args: Prisma.reservahabitacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reservahabitacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reservahabitacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservahabitacionPayload>
          }
          aggregate: {
            args: Prisma.ReservahabitacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservahabitacion>
          }
          groupBy: {
            args: Prisma.reservahabitacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservahabitacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.reservahabitacionCountArgs<ExtArgs>
            result: $Utils.Optional<ReservahabitacionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    administrador?: administradorOmit
    cliente?: clienteOmit
    habitacion?: habitacionOmit
    imagenhotel?: imagenhotelOmit
    promocion?: promocionOmit
    reserva?: reservaOmit
    reservahabitacion?: reservahabitacionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    reserva: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reserva?: boolean | ClienteCountOutputTypeCountReservaArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountReservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservaWhereInput
  }


  /**
   * Count Type HabitacionCountOutputType
   */

  export type HabitacionCountOutputType = {
    promocion: number
    reservahabitacion: number
  }

  export type HabitacionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promocion?: boolean | HabitacionCountOutputTypeCountPromocionArgs
    reservahabitacion?: boolean | HabitacionCountOutputTypeCountReservahabitacionArgs
  }

  // Custom InputTypes
  /**
   * HabitacionCountOutputType without action
   */
  export type HabitacionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitacionCountOutputType
     */
    select?: HabitacionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HabitacionCountOutputType without action
   */
  export type HabitacionCountOutputTypeCountPromocionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promocionWhereInput
  }

  /**
   * HabitacionCountOutputType without action
   */
  export type HabitacionCountOutputTypeCountReservahabitacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservahabitacionWhereInput
  }


  /**
   * Count Type ReservaCountOutputType
   */

  export type ReservaCountOutputType = {
    reservahabitacion: number
  }

  export type ReservaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservahabitacion?: boolean | ReservaCountOutputTypeCountReservahabitacionArgs
  }

  // Custom InputTypes
  /**
   * ReservaCountOutputType without action
   */
  export type ReservaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservaCountOutputType
     */
    select?: ReservaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReservaCountOutputType without action
   */
  export type ReservaCountOutputTypeCountReservahabitacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservahabitacionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model administrador
   */

  export type AggregateAdministrador = {
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  export type AdministradorAvgAggregateOutputType = {
    id: number | null
  }

  export type AdministradorSumAggregateOutputType = {
    id: number | null
  }

  export type AdministradorMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    password: string | null
  }

  export type AdministradorMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    password: string | null
  }

  export type AdministradorCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    password: number
    _all: number
  }


  export type AdministradorAvgAggregateInputType = {
    id?: true
  }

  export type AdministradorSumAggregateInputType = {
    id?: true
  }

  export type AdministradorMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    password?: true
  }

  export type AdministradorMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    password?: true
  }

  export type AdministradorCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    password?: true
    _all?: true
  }

  export type AdministradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which administrador to aggregate.
     */
    where?: administradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of administradors to fetch.
     */
    orderBy?: administradorOrderByWithRelationInput | administradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: administradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned administradors
    **/
    _count?: true | AdministradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdministradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdministradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministradorMaxAggregateInputType
  }

  export type GetAdministradorAggregateType<T extends AdministradorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministrador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministrador[P]>
      : GetScalarType<T[P], AggregateAdministrador[P]>
  }




  export type administradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: administradorWhereInput
    orderBy?: administradorOrderByWithAggregationInput | administradorOrderByWithAggregationInput[]
    by: AdministradorScalarFieldEnum[] | AdministradorScalarFieldEnum
    having?: administradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministradorCountAggregateInputType | true
    _avg?: AdministradorAvgAggregateInputType
    _sum?: AdministradorSumAggregateInputType
    _min?: AdministradorMinAggregateInputType
    _max?: AdministradorMaxAggregateInputType
  }

  export type AdministradorGroupByOutputType = {
    id: number
    nombre: string
    correo: string
    password: string
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  type GetAdministradorGroupByPayload<T extends administradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdministradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
            : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
        }
      >
    >


  export type administradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    password?: boolean
  }, ExtArgs["result"]["administrador"]>



  export type administradorSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
    password?: boolean
  }

  export type administradorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "correo" | "password", ExtArgs["result"]["administrador"]>

  export type $administradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "administrador"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      correo: string
      password: string
    }, ExtArgs["result"]["administrador"]>
    composites: {}
  }

  type administradorGetPayload<S extends boolean | null | undefined | administradorDefaultArgs> = $Result.GetResult<Prisma.$administradorPayload, S>

  type administradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<administradorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdministradorCountAggregateInputType | true
    }

  export interface administradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['administrador'], meta: { name: 'administrador' } }
    /**
     * Find zero or one Administrador that matches the filter.
     * @param {administradorFindUniqueArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends administradorFindUniqueArgs>(args: SelectSubset<T, administradorFindUniqueArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Administrador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {administradorFindUniqueOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends administradorFindUniqueOrThrowArgs>(args: SelectSubset<T, administradorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Administrador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorFindFirstArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends administradorFindFirstArgs>(args?: SelectSubset<T, administradorFindFirstArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Administrador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorFindFirstOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends administradorFindFirstOrThrowArgs>(args?: SelectSubset<T, administradorFindFirstOrThrowArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Administradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administradors
     * const administradors = await prisma.administrador.findMany()
     * 
     * // Get first 10 Administradors
     * const administradors = await prisma.administrador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administradorWithIdOnly = await prisma.administrador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends administradorFindManyArgs>(args?: SelectSubset<T, administradorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Administrador.
     * @param {administradorCreateArgs} args - Arguments to create a Administrador.
     * @example
     * // Create one Administrador
     * const Administrador = await prisma.administrador.create({
     *   data: {
     *     // ... data to create a Administrador
     *   }
     * })
     * 
     */
    create<T extends administradorCreateArgs>(args: SelectSubset<T, administradorCreateArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Administradors.
     * @param {administradorCreateManyArgs} args - Arguments to create many Administradors.
     * @example
     * // Create many Administradors
     * const administrador = await prisma.administrador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends administradorCreateManyArgs>(args?: SelectSubset<T, administradorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Administrador.
     * @param {administradorDeleteArgs} args - Arguments to delete one Administrador.
     * @example
     * // Delete one Administrador
     * const Administrador = await prisma.administrador.delete({
     *   where: {
     *     // ... filter to delete one Administrador
     *   }
     * })
     * 
     */
    delete<T extends administradorDeleteArgs>(args: SelectSubset<T, administradorDeleteArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Administrador.
     * @param {administradorUpdateArgs} args - Arguments to update one Administrador.
     * @example
     * // Update one Administrador
     * const administrador = await prisma.administrador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends administradorUpdateArgs>(args: SelectSubset<T, administradorUpdateArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Administradors.
     * @param {administradorDeleteManyArgs} args - Arguments to filter Administradors to delete.
     * @example
     * // Delete a few Administradors
     * const { count } = await prisma.administrador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends administradorDeleteManyArgs>(args?: SelectSubset<T, administradorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administradors
     * const administrador = await prisma.administrador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends administradorUpdateManyArgs>(args: SelectSubset<T, administradorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Administrador.
     * @param {administradorUpsertArgs} args - Arguments to update or create a Administrador.
     * @example
     * // Update or create a Administrador
     * const administrador = await prisma.administrador.upsert({
     *   create: {
     *     // ... data to create a Administrador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administrador we want to update
     *   }
     * })
     */
    upsert<T extends administradorUpsertArgs>(args: SelectSubset<T, administradorUpsertArgs<ExtArgs>>): Prisma__administradorClient<$Result.GetResult<Prisma.$administradorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorCountArgs} args - Arguments to filter Administradors to count.
     * @example
     * // Count the number of Administradors
     * const count = await prisma.administrador.count({
     *   where: {
     *     // ... the filter for the Administradors we want to count
     *   }
     * })
    **/
    count<T extends administradorCountArgs>(
      args?: Subset<T, administradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministradorAggregateArgs>(args: Subset<T, AdministradorAggregateArgs>): Prisma.PrismaPromise<GetAdministradorAggregateType<T>>

    /**
     * Group by Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {administradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends administradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: administradorGroupByArgs['orderBy'] }
        : { orderBy?: administradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, administradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the administrador model
   */
  readonly fields: administradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for administrador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__administradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the administrador model
   */
  interface administradorFieldRefs {
    readonly id: FieldRef<"administrador", 'Int'>
    readonly nombre: FieldRef<"administrador", 'String'>
    readonly correo: FieldRef<"administrador", 'String'>
    readonly password: FieldRef<"administrador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * administrador findUnique
   */
  export type administradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter, which administrador to fetch.
     */
    where: administradorWhereUniqueInput
  }

  /**
   * administrador findUniqueOrThrow
   */
  export type administradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter, which administrador to fetch.
     */
    where: administradorWhereUniqueInput
  }

  /**
   * administrador findFirst
   */
  export type administradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter, which administrador to fetch.
     */
    where?: administradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of administradors to fetch.
     */
    orderBy?: administradorOrderByWithRelationInput | administradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for administradors.
     */
    cursor?: administradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of administradors.
     */
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * administrador findFirstOrThrow
   */
  export type administradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter, which administrador to fetch.
     */
    where?: administradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of administradors to fetch.
     */
    orderBy?: administradorOrderByWithRelationInput | administradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for administradors.
     */
    cursor?: administradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of administradors.
     */
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * administrador findMany
   */
  export type administradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter, which administradors to fetch.
     */
    where?: administradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of administradors to fetch.
     */
    orderBy?: administradorOrderByWithRelationInput | administradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing administradors.
     */
    cursor?: administradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` administradors.
     */
    skip?: number
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * administrador create
   */
  export type administradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * The data needed to create a administrador.
     */
    data: XOR<administradorCreateInput, administradorUncheckedCreateInput>
  }

  /**
   * administrador createMany
   */
  export type administradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many administradors.
     */
    data: administradorCreateManyInput | administradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * administrador update
   */
  export type administradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * The data needed to update a administrador.
     */
    data: XOR<administradorUpdateInput, administradorUncheckedUpdateInput>
    /**
     * Choose, which administrador to update.
     */
    where: administradorWhereUniqueInput
  }

  /**
   * administrador updateMany
   */
  export type administradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update administradors.
     */
    data: XOR<administradorUpdateManyMutationInput, administradorUncheckedUpdateManyInput>
    /**
     * Filter which administradors to update
     */
    where?: administradorWhereInput
    /**
     * Limit how many administradors to update.
     */
    limit?: number
  }

  /**
   * administrador upsert
   */
  export type administradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * The filter to search for the administrador to update in case it exists.
     */
    where: administradorWhereUniqueInput
    /**
     * In case the administrador found by the `where` argument doesn't exist, create a new administrador with this data.
     */
    create: XOR<administradorCreateInput, administradorUncheckedCreateInput>
    /**
     * In case the administrador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<administradorUpdateInput, administradorUncheckedUpdateInput>
  }

  /**
   * administrador delete
   */
  export type administradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
    /**
     * Filter which administrador to delete.
     */
    where: administradorWhereUniqueInput
  }

  /**
   * administrador deleteMany
   */
  export type administradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which administradors to delete
     */
    where?: administradorWhereInput
    /**
     * Limit how many administradors to delete.
     */
    limit?: number
  }

  /**
   * administrador without action
   */
  export type administradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the administrador
     */
    select?: administradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the administrador
     */
    omit?: administradorOmit<ExtArgs> | null
  }


  /**
   * Model cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    telefono: string | null
    email: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    telefono: string | null
    email: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    telefono: number
    email: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    telefono?: true
    email?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    telefono?: true
    email?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    telefono?: true
    email?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cliente to aggregate.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type clienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clienteWhereInput
    orderBy?: clienteOrderByWithAggregationInput | clienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nombre: string
    apellido: string
    telefono: string | null
    email: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends clienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type clienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    telefono?: boolean
    email?: boolean
    reserva?: boolean | cliente$reservaArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type clienteSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    telefono?: boolean
    email?: boolean
  }

  export type clienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "apellido" | "telefono" | "email", ExtArgs["result"]["cliente"]>
  export type clienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reserva?: boolean | cliente$reservaArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $clientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cliente"
    objects: {
      reserva: Prisma.$reservaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      apellido: string
      telefono: string | null
      email: string
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type clienteGetPayload<S extends boolean | null | undefined | clienteDefaultArgs> = $Result.GetResult<Prisma.$clientePayload, S>

  type clienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface clienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cliente'], meta: { name: 'cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {clienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clienteFindUniqueArgs>(args: SelectSubset<T, clienteFindUniqueArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clienteFindUniqueOrThrowArgs>(args: SelectSubset<T, clienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clienteFindFirstArgs>(args?: SelectSubset<T, clienteFindFirstArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clienteFindFirstOrThrowArgs>(args?: SelectSubset<T, clienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clienteFindManyArgs>(args?: SelectSubset<T, clienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {clienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends clienteCreateArgs>(args: SelectSubset<T, clienteCreateArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {clienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clienteCreateManyArgs>(args?: SelectSubset<T, clienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {clienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends clienteDeleteArgs>(args: SelectSubset<T, clienteDeleteArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {clienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clienteUpdateArgs>(args: SelectSubset<T, clienteUpdateArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {clienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clienteDeleteManyArgs>(args?: SelectSubset<T, clienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clienteUpdateManyArgs>(args: SelectSubset<T, clienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {clienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends clienteUpsertArgs>(args: SelectSubset<T, clienteUpsertArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clienteCountArgs>(
      args?: Subset<T, clienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clienteGroupByArgs['orderBy'] }
        : { orderBy?: clienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cliente model
   */
  readonly fields: clienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reserva<T extends cliente$reservaArgs<ExtArgs> = {}>(args?: Subset<T, cliente$reservaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cliente model
   */
  interface clienteFieldRefs {
    readonly id: FieldRef<"cliente", 'Int'>
    readonly nombre: FieldRef<"cliente", 'String'>
    readonly apellido: FieldRef<"cliente", 'String'>
    readonly telefono: FieldRef<"cliente", 'String'>
    readonly email: FieldRef<"cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cliente findUnique
   */
  export type clienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente findUniqueOrThrow
   */
  export type clienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente findFirst
   */
  export type clienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente findFirstOrThrow
   */
  export type clienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter, which cliente to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente findMany
   */
  export type clienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clienteOrderByWithRelationInput | clienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * cliente create
   */
  export type clienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * The data needed to create a cliente.
     */
    data: XOR<clienteCreateInput, clienteUncheckedCreateInput>
  }

  /**
   * cliente createMany
   */
  export type clienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: clienteCreateManyInput | clienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cliente update
   */
  export type clienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * The data needed to update a cliente.
     */
    data: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
    /**
     * Choose, which cliente to update.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente updateMany
   */
  export type clienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clienteUpdateManyMutationInput, clienteUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clienteWhereInput
    /**
     * Limit how many clientes to update.
     */
    limit?: number
  }

  /**
   * cliente upsert
   */
  export type clienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * The filter to search for the cliente to update in case it exists.
     */
    where: clienteWhereUniqueInput
    /**
     * In case the cliente found by the `where` argument doesn't exist, create a new cliente with this data.
     */
    create: XOR<clienteCreateInput, clienteUncheckedCreateInput>
    /**
     * In case the cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
  }

  /**
   * cliente delete
   */
  export type clienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    /**
     * Filter which cliente to delete.
     */
    where: clienteWhereUniqueInput
  }

  /**
   * cliente deleteMany
   */
  export type clienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clienteWhereInput
    /**
     * Limit how many clientes to delete.
     */
    limit?: number
  }

  /**
   * cliente.reserva
   */
  export type cliente$reservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    where?: reservaWhereInput
    orderBy?: reservaOrderByWithRelationInput | reservaOrderByWithRelationInput[]
    cursor?: reservaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * cliente without action
   */
  export type clienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
  }


  /**
   * Model habitacion
   */

  export type AggregateHabitacion = {
    _count: HabitacionCountAggregateOutputType | null
    _avg: HabitacionAvgAggregateOutputType | null
    _sum: HabitacionSumAggregateOutputType | null
    _min: HabitacionMinAggregateOutputType | null
    _max: HabitacionMaxAggregateOutputType | null
  }

  export type HabitacionAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type HabitacionSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type HabitacionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    descripcion: string | null
    imagenUrl: string | null
    tipoHabitacion: string | null
  }

  export type HabitacionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    descripcion: string | null
    imagenUrl: string | null
    tipoHabitacion: string | null
  }

  export type HabitacionCountAggregateOutputType = {
    id: number
    nombre: number
    precio: number
    descripcion: number
    imagenUrl: number
    tipoHabitacion: number
    _all: number
  }


  export type HabitacionAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type HabitacionSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type HabitacionMinAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    descripcion?: true
    imagenUrl?: true
    tipoHabitacion?: true
  }

  export type HabitacionMaxAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    descripcion?: true
    imagenUrl?: true
    tipoHabitacion?: true
  }

  export type HabitacionCountAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    descripcion?: true
    imagenUrl?: true
    tipoHabitacion?: true
    _all?: true
  }

  export type HabitacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which habitacion to aggregate.
     */
    where?: habitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitacions to fetch.
     */
    orderBy?: habitacionOrderByWithRelationInput | habitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: habitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned habitacions
    **/
    _count?: true | HabitacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabitacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabitacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitacionMaxAggregateInputType
  }

  export type GetHabitacionAggregateType<T extends HabitacionAggregateArgs> = {
        [P in keyof T & keyof AggregateHabitacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabitacion[P]>
      : GetScalarType<T[P], AggregateHabitacion[P]>
  }




  export type habitacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: habitacionWhereInput
    orderBy?: habitacionOrderByWithAggregationInput | habitacionOrderByWithAggregationInput[]
    by: HabitacionScalarFieldEnum[] | HabitacionScalarFieldEnum
    having?: habitacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitacionCountAggregateInputType | true
    _avg?: HabitacionAvgAggregateInputType
    _sum?: HabitacionSumAggregateInputType
    _min?: HabitacionMinAggregateInputType
    _max?: HabitacionMaxAggregateInputType
  }

  export type HabitacionGroupByOutputType = {
    id: number
    nombre: string
    precio: number
    descripcion: string | null
    imagenUrl: string
    tipoHabitacion: string | null
    _count: HabitacionCountAggregateOutputType | null
    _avg: HabitacionAvgAggregateOutputType | null
    _sum: HabitacionSumAggregateOutputType | null
    _min: HabitacionMinAggregateOutputType | null
    _max: HabitacionMaxAggregateOutputType | null
  }

  type GetHabitacionGroupByPayload<T extends habitacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabitacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitacionGroupByOutputType[P]>
            : GetScalarType<T[P], HabitacionGroupByOutputType[P]>
        }
      >
    >


  export type habitacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    descripcion?: boolean
    imagenUrl?: boolean
    tipoHabitacion?: boolean
    promocion?: boolean | habitacion$promocionArgs<ExtArgs>
    reservahabitacion?: boolean | habitacion$reservahabitacionArgs<ExtArgs>
    _count?: boolean | HabitacionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habitacion"]>



  export type habitacionSelectScalar = {
    id?: boolean
    nombre?: boolean
    precio?: boolean
    descripcion?: boolean
    imagenUrl?: boolean
    tipoHabitacion?: boolean
  }

  export type habitacionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "precio" | "descripcion" | "imagenUrl" | "tipoHabitacion", ExtArgs["result"]["habitacion"]>
  export type habitacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promocion?: boolean | habitacion$promocionArgs<ExtArgs>
    reservahabitacion?: boolean | habitacion$reservahabitacionArgs<ExtArgs>
    _count?: boolean | HabitacionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $habitacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "habitacion"
    objects: {
      promocion: Prisma.$promocionPayload<ExtArgs>[]
      reservahabitacion: Prisma.$reservahabitacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      precio: number
      descripcion: string | null
      imagenUrl: string
      tipoHabitacion: string | null
    }, ExtArgs["result"]["habitacion"]>
    composites: {}
  }

  type habitacionGetPayload<S extends boolean | null | undefined | habitacionDefaultArgs> = $Result.GetResult<Prisma.$habitacionPayload, S>

  type habitacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<habitacionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HabitacionCountAggregateInputType | true
    }

  export interface habitacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['habitacion'], meta: { name: 'habitacion' } }
    /**
     * Find zero or one Habitacion that matches the filter.
     * @param {habitacionFindUniqueArgs} args - Arguments to find a Habitacion
     * @example
     * // Get one Habitacion
     * const habitacion = await prisma.habitacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends habitacionFindUniqueArgs>(args: SelectSubset<T, habitacionFindUniqueArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Habitacion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {habitacionFindUniqueOrThrowArgs} args - Arguments to find a Habitacion
     * @example
     * // Get one Habitacion
     * const habitacion = await prisma.habitacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends habitacionFindUniqueOrThrowArgs>(args: SelectSubset<T, habitacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Habitacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionFindFirstArgs} args - Arguments to find a Habitacion
     * @example
     * // Get one Habitacion
     * const habitacion = await prisma.habitacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends habitacionFindFirstArgs>(args?: SelectSubset<T, habitacionFindFirstArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Habitacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionFindFirstOrThrowArgs} args - Arguments to find a Habitacion
     * @example
     * // Get one Habitacion
     * const habitacion = await prisma.habitacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends habitacionFindFirstOrThrowArgs>(args?: SelectSubset<T, habitacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Habitacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habitacions
     * const habitacions = await prisma.habitacion.findMany()
     * 
     * // Get first 10 Habitacions
     * const habitacions = await prisma.habitacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habitacionWithIdOnly = await prisma.habitacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends habitacionFindManyArgs>(args?: SelectSubset<T, habitacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Habitacion.
     * @param {habitacionCreateArgs} args - Arguments to create a Habitacion.
     * @example
     * // Create one Habitacion
     * const Habitacion = await prisma.habitacion.create({
     *   data: {
     *     // ... data to create a Habitacion
     *   }
     * })
     * 
     */
    create<T extends habitacionCreateArgs>(args: SelectSubset<T, habitacionCreateArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Habitacions.
     * @param {habitacionCreateManyArgs} args - Arguments to create many Habitacions.
     * @example
     * // Create many Habitacions
     * const habitacion = await prisma.habitacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends habitacionCreateManyArgs>(args?: SelectSubset<T, habitacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Habitacion.
     * @param {habitacionDeleteArgs} args - Arguments to delete one Habitacion.
     * @example
     * // Delete one Habitacion
     * const Habitacion = await prisma.habitacion.delete({
     *   where: {
     *     // ... filter to delete one Habitacion
     *   }
     * })
     * 
     */
    delete<T extends habitacionDeleteArgs>(args: SelectSubset<T, habitacionDeleteArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Habitacion.
     * @param {habitacionUpdateArgs} args - Arguments to update one Habitacion.
     * @example
     * // Update one Habitacion
     * const habitacion = await prisma.habitacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends habitacionUpdateArgs>(args: SelectSubset<T, habitacionUpdateArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Habitacions.
     * @param {habitacionDeleteManyArgs} args - Arguments to filter Habitacions to delete.
     * @example
     * // Delete a few Habitacions
     * const { count } = await prisma.habitacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends habitacionDeleteManyArgs>(args?: SelectSubset<T, habitacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habitacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habitacions
     * const habitacion = await prisma.habitacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends habitacionUpdateManyArgs>(args: SelectSubset<T, habitacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habitacion.
     * @param {habitacionUpsertArgs} args - Arguments to update or create a Habitacion.
     * @example
     * // Update or create a Habitacion
     * const habitacion = await prisma.habitacion.upsert({
     *   create: {
     *     // ... data to create a Habitacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habitacion we want to update
     *   }
     * })
     */
    upsert<T extends habitacionUpsertArgs>(args: SelectSubset<T, habitacionUpsertArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Habitacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionCountArgs} args - Arguments to filter Habitacions to count.
     * @example
     * // Count the number of Habitacions
     * const count = await prisma.habitacion.count({
     *   where: {
     *     // ... the filter for the Habitacions we want to count
     *   }
     * })
    **/
    count<T extends habitacionCountArgs>(
      args?: Subset<T, habitacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habitacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitacionAggregateArgs>(args: Subset<T, HabitacionAggregateArgs>): Prisma.PrismaPromise<GetHabitacionAggregateType<T>>

    /**
     * Group by Habitacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends habitacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: habitacionGroupByArgs['orderBy'] }
        : { orderBy?: habitacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, habitacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the habitacion model
   */
  readonly fields: habitacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for habitacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__habitacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promocion<T extends habitacion$promocionArgs<ExtArgs> = {}>(args?: Subset<T, habitacion$promocionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reservahabitacion<T extends habitacion$reservahabitacionArgs<ExtArgs> = {}>(args?: Subset<T, habitacion$reservahabitacionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the habitacion model
   */
  interface habitacionFieldRefs {
    readonly id: FieldRef<"habitacion", 'Int'>
    readonly nombre: FieldRef<"habitacion", 'String'>
    readonly precio: FieldRef<"habitacion", 'Float'>
    readonly descripcion: FieldRef<"habitacion", 'String'>
    readonly imagenUrl: FieldRef<"habitacion", 'String'>
    readonly tipoHabitacion: FieldRef<"habitacion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * habitacion findUnique
   */
  export type habitacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter, which habitacion to fetch.
     */
    where: habitacionWhereUniqueInput
  }

  /**
   * habitacion findUniqueOrThrow
   */
  export type habitacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter, which habitacion to fetch.
     */
    where: habitacionWhereUniqueInput
  }

  /**
   * habitacion findFirst
   */
  export type habitacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter, which habitacion to fetch.
     */
    where?: habitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitacions to fetch.
     */
    orderBy?: habitacionOrderByWithRelationInput | habitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for habitacions.
     */
    cursor?: habitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of habitacions.
     */
    distinct?: HabitacionScalarFieldEnum | HabitacionScalarFieldEnum[]
  }

  /**
   * habitacion findFirstOrThrow
   */
  export type habitacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter, which habitacion to fetch.
     */
    where?: habitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitacions to fetch.
     */
    orderBy?: habitacionOrderByWithRelationInput | habitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for habitacions.
     */
    cursor?: habitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of habitacions.
     */
    distinct?: HabitacionScalarFieldEnum | HabitacionScalarFieldEnum[]
  }

  /**
   * habitacion findMany
   */
  export type habitacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter, which habitacions to fetch.
     */
    where?: habitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitacions to fetch.
     */
    orderBy?: habitacionOrderByWithRelationInput | habitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing habitacions.
     */
    cursor?: habitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitacions.
     */
    skip?: number
    distinct?: HabitacionScalarFieldEnum | HabitacionScalarFieldEnum[]
  }

  /**
   * habitacion create
   */
  export type habitacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * The data needed to create a habitacion.
     */
    data: XOR<habitacionCreateInput, habitacionUncheckedCreateInput>
  }

  /**
   * habitacion createMany
   */
  export type habitacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many habitacions.
     */
    data: habitacionCreateManyInput | habitacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * habitacion update
   */
  export type habitacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * The data needed to update a habitacion.
     */
    data: XOR<habitacionUpdateInput, habitacionUncheckedUpdateInput>
    /**
     * Choose, which habitacion to update.
     */
    where: habitacionWhereUniqueInput
  }

  /**
   * habitacion updateMany
   */
  export type habitacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update habitacions.
     */
    data: XOR<habitacionUpdateManyMutationInput, habitacionUncheckedUpdateManyInput>
    /**
     * Filter which habitacions to update
     */
    where?: habitacionWhereInput
    /**
     * Limit how many habitacions to update.
     */
    limit?: number
  }

  /**
   * habitacion upsert
   */
  export type habitacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * The filter to search for the habitacion to update in case it exists.
     */
    where: habitacionWhereUniqueInput
    /**
     * In case the habitacion found by the `where` argument doesn't exist, create a new habitacion with this data.
     */
    create: XOR<habitacionCreateInput, habitacionUncheckedCreateInput>
    /**
     * In case the habitacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<habitacionUpdateInput, habitacionUncheckedUpdateInput>
  }

  /**
   * habitacion delete
   */
  export type habitacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
    /**
     * Filter which habitacion to delete.
     */
    where: habitacionWhereUniqueInput
  }

  /**
   * habitacion deleteMany
   */
  export type habitacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which habitacions to delete
     */
    where?: habitacionWhereInput
    /**
     * Limit how many habitacions to delete.
     */
    limit?: number
  }

  /**
   * habitacion.promocion
   */
  export type habitacion$promocionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    where?: promocionWhereInput
    orderBy?: promocionOrderByWithRelationInput | promocionOrderByWithRelationInput[]
    cursor?: promocionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromocionScalarFieldEnum | PromocionScalarFieldEnum[]
  }

  /**
   * habitacion.reservahabitacion
   */
  export type habitacion$reservahabitacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    where?: reservahabitacionWhereInput
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    cursor?: reservahabitacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservahabitacionScalarFieldEnum | ReservahabitacionScalarFieldEnum[]
  }

  /**
   * habitacion without action
   */
  export type habitacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the habitacion
     */
    select?: habitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the habitacion
     */
    omit?: habitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: habitacionInclude<ExtArgs> | null
  }


  /**
   * Model imagenhotel
   */

  export type AggregateImagenhotel = {
    _count: ImagenhotelCountAggregateOutputType | null
    _avg: ImagenhotelAvgAggregateOutputType | null
    _sum: ImagenhotelSumAggregateOutputType | null
    _min: ImagenhotelMinAggregateOutputType | null
    _max: ImagenhotelMaxAggregateOutputType | null
  }

  export type ImagenhotelAvgAggregateOutputType = {
    id: number | null
  }

  export type ImagenhotelSumAggregateOutputType = {
    id: number | null
  }

  export type ImagenhotelMinAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type ImagenhotelMaxAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type ImagenhotelCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type ImagenhotelAvgAggregateInputType = {
    id?: true
  }

  export type ImagenhotelSumAggregateInputType = {
    id?: true
  }

  export type ImagenhotelMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type ImagenhotelMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type ImagenhotelCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type ImagenhotelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagenhotel to aggregate.
     */
    where?: imagenhotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagenhotels to fetch.
     */
    orderBy?: imagenhotelOrderByWithRelationInput | imagenhotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagenhotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagenhotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagenhotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imagenhotels
    **/
    _count?: true | ImagenhotelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagenhotelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagenhotelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagenhotelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagenhotelMaxAggregateInputType
  }

  export type GetImagenhotelAggregateType<T extends ImagenhotelAggregateArgs> = {
        [P in keyof T & keyof AggregateImagenhotel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagenhotel[P]>
      : GetScalarType<T[P], AggregateImagenhotel[P]>
  }




  export type imagenhotelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagenhotelWhereInput
    orderBy?: imagenhotelOrderByWithAggregationInput | imagenhotelOrderByWithAggregationInput[]
    by: ImagenhotelScalarFieldEnum[] | ImagenhotelScalarFieldEnum
    having?: imagenhotelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagenhotelCountAggregateInputType | true
    _avg?: ImagenhotelAvgAggregateInputType
    _sum?: ImagenhotelSumAggregateInputType
    _min?: ImagenhotelMinAggregateInputType
    _max?: ImagenhotelMaxAggregateInputType
  }

  export type ImagenhotelGroupByOutputType = {
    id: number
    url: string
    _count: ImagenhotelCountAggregateOutputType | null
    _avg: ImagenhotelAvgAggregateOutputType | null
    _sum: ImagenhotelSumAggregateOutputType | null
    _min: ImagenhotelMinAggregateOutputType | null
    _max: ImagenhotelMaxAggregateOutputType | null
  }

  type GetImagenhotelGroupByPayload<T extends imagenhotelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagenhotelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagenhotelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagenhotelGroupByOutputType[P]>
            : GetScalarType<T[P], ImagenhotelGroupByOutputType[P]>
        }
      >
    >


  export type imagenhotelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["imagenhotel"]>



  export type imagenhotelSelectScalar = {
    id?: boolean
    url?: boolean
  }

  export type imagenhotelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url", ExtArgs["result"]["imagenhotel"]>

  export type $imagenhotelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "imagenhotel"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
    }, ExtArgs["result"]["imagenhotel"]>
    composites: {}
  }

  type imagenhotelGetPayload<S extends boolean | null | undefined | imagenhotelDefaultArgs> = $Result.GetResult<Prisma.$imagenhotelPayload, S>

  type imagenhotelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<imagenhotelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImagenhotelCountAggregateInputType | true
    }

  export interface imagenhotelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imagenhotel'], meta: { name: 'imagenhotel' } }
    /**
     * Find zero or one Imagenhotel that matches the filter.
     * @param {imagenhotelFindUniqueArgs} args - Arguments to find a Imagenhotel
     * @example
     * // Get one Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends imagenhotelFindUniqueArgs>(args: SelectSubset<T, imagenhotelFindUniqueArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Imagenhotel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {imagenhotelFindUniqueOrThrowArgs} args - Arguments to find a Imagenhotel
     * @example
     * // Get one Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends imagenhotelFindUniqueOrThrowArgs>(args: SelectSubset<T, imagenhotelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Imagenhotel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelFindFirstArgs} args - Arguments to find a Imagenhotel
     * @example
     * // Get one Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends imagenhotelFindFirstArgs>(args?: SelectSubset<T, imagenhotelFindFirstArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Imagenhotel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelFindFirstOrThrowArgs} args - Arguments to find a Imagenhotel
     * @example
     * // Get one Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends imagenhotelFindFirstOrThrowArgs>(args?: SelectSubset<T, imagenhotelFindFirstOrThrowArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Imagenhotels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagenhotels
     * const imagenhotels = await prisma.imagenhotel.findMany()
     * 
     * // Get first 10 Imagenhotels
     * const imagenhotels = await prisma.imagenhotel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagenhotelWithIdOnly = await prisma.imagenhotel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends imagenhotelFindManyArgs>(args?: SelectSubset<T, imagenhotelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Imagenhotel.
     * @param {imagenhotelCreateArgs} args - Arguments to create a Imagenhotel.
     * @example
     * // Create one Imagenhotel
     * const Imagenhotel = await prisma.imagenhotel.create({
     *   data: {
     *     // ... data to create a Imagenhotel
     *   }
     * })
     * 
     */
    create<T extends imagenhotelCreateArgs>(args: SelectSubset<T, imagenhotelCreateArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Imagenhotels.
     * @param {imagenhotelCreateManyArgs} args - Arguments to create many Imagenhotels.
     * @example
     * // Create many Imagenhotels
     * const imagenhotel = await prisma.imagenhotel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends imagenhotelCreateManyArgs>(args?: SelectSubset<T, imagenhotelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imagenhotel.
     * @param {imagenhotelDeleteArgs} args - Arguments to delete one Imagenhotel.
     * @example
     * // Delete one Imagenhotel
     * const Imagenhotel = await prisma.imagenhotel.delete({
     *   where: {
     *     // ... filter to delete one Imagenhotel
     *   }
     * })
     * 
     */
    delete<T extends imagenhotelDeleteArgs>(args: SelectSubset<T, imagenhotelDeleteArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Imagenhotel.
     * @param {imagenhotelUpdateArgs} args - Arguments to update one Imagenhotel.
     * @example
     * // Update one Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends imagenhotelUpdateArgs>(args: SelectSubset<T, imagenhotelUpdateArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Imagenhotels.
     * @param {imagenhotelDeleteManyArgs} args - Arguments to filter Imagenhotels to delete.
     * @example
     * // Delete a few Imagenhotels
     * const { count } = await prisma.imagenhotel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends imagenhotelDeleteManyArgs>(args?: SelectSubset<T, imagenhotelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagenhotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagenhotels
     * const imagenhotel = await prisma.imagenhotel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends imagenhotelUpdateManyArgs>(args: SelectSubset<T, imagenhotelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagenhotel.
     * @param {imagenhotelUpsertArgs} args - Arguments to update or create a Imagenhotel.
     * @example
     * // Update or create a Imagenhotel
     * const imagenhotel = await prisma.imagenhotel.upsert({
     *   create: {
     *     // ... data to create a Imagenhotel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagenhotel we want to update
     *   }
     * })
     */
    upsert<T extends imagenhotelUpsertArgs>(args: SelectSubset<T, imagenhotelUpsertArgs<ExtArgs>>): Prisma__imagenhotelClient<$Result.GetResult<Prisma.$imagenhotelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Imagenhotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelCountArgs} args - Arguments to filter Imagenhotels to count.
     * @example
     * // Count the number of Imagenhotels
     * const count = await prisma.imagenhotel.count({
     *   where: {
     *     // ... the filter for the Imagenhotels we want to count
     *   }
     * })
    **/
    count<T extends imagenhotelCountArgs>(
      args?: Subset<T, imagenhotelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagenhotelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagenhotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagenhotelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagenhotelAggregateArgs>(args: Subset<T, ImagenhotelAggregateArgs>): Prisma.PrismaPromise<GetImagenhotelAggregateType<T>>

    /**
     * Group by Imagenhotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagenhotelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagenhotelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagenhotelGroupByArgs['orderBy'] }
        : { orderBy?: imagenhotelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagenhotelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagenhotelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imagenhotel model
   */
  readonly fields: imagenhotelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imagenhotel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagenhotelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the imagenhotel model
   */
  interface imagenhotelFieldRefs {
    readonly id: FieldRef<"imagenhotel", 'Int'>
    readonly url: FieldRef<"imagenhotel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * imagenhotel findUnique
   */
  export type imagenhotelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter, which imagenhotel to fetch.
     */
    where: imagenhotelWhereUniqueInput
  }

  /**
   * imagenhotel findUniqueOrThrow
   */
  export type imagenhotelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter, which imagenhotel to fetch.
     */
    where: imagenhotelWhereUniqueInput
  }

  /**
   * imagenhotel findFirst
   */
  export type imagenhotelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter, which imagenhotel to fetch.
     */
    where?: imagenhotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagenhotels to fetch.
     */
    orderBy?: imagenhotelOrderByWithRelationInput | imagenhotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagenhotels.
     */
    cursor?: imagenhotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagenhotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagenhotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagenhotels.
     */
    distinct?: ImagenhotelScalarFieldEnum | ImagenhotelScalarFieldEnum[]
  }

  /**
   * imagenhotel findFirstOrThrow
   */
  export type imagenhotelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter, which imagenhotel to fetch.
     */
    where?: imagenhotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagenhotels to fetch.
     */
    orderBy?: imagenhotelOrderByWithRelationInput | imagenhotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagenhotels.
     */
    cursor?: imagenhotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagenhotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagenhotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagenhotels.
     */
    distinct?: ImagenhotelScalarFieldEnum | ImagenhotelScalarFieldEnum[]
  }

  /**
   * imagenhotel findMany
   */
  export type imagenhotelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter, which imagenhotels to fetch.
     */
    where?: imagenhotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagenhotels to fetch.
     */
    orderBy?: imagenhotelOrderByWithRelationInput | imagenhotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imagenhotels.
     */
    cursor?: imagenhotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagenhotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagenhotels.
     */
    skip?: number
    distinct?: ImagenhotelScalarFieldEnum | ImagenhotelScalarFieldEnum[]
  }

  /**
   * imagenhotel create
   */
  export type imagenhotelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * The data needed to create a imagenhotel.
     */
    data: XOR<imagenhotelCreateInput, imagenhotelUncheckedCreateInput>
  }

  /**
   * imagenhotel createMany
   */
  export type imagenhotelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imagenhotels.
     */
    data: imagenhotelCreateManyInput | imagenhotelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imagenhotel update
   */
  export type imagenhotelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * The data needed to update a imagenhotel.
     */
    data: XOR<imagenhotelUpdateInput, imagenhotelUncheckedUpdateInput>
    /**
     * Choose, which imagenhotel to update.
     */
    where: imagenhotelWhereUniqueInput
  }

  /**
   * imagenhotel updateMany
   */
  export type imagenhotelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imagenhotels.
     */
    data: XOR<imagenhotelUpdateManyMutationInput, imagenhotelUncheckedUpdateManyInput>
    /**
     * Filter which imagenhotels to update
     */
    where?: imagenhotelWhereInput
    /**
     * Limit how many imagenhotels to update.
     */
    limit?: number
  }

  /**
   * imagenhotel upsert
   */
  export type imagenhotelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * The filter to search for the imagenhotel to update in case it exists.
     */
    where: imagenhotelWhereUniqueInput
    /**
     * In case the imagenhotel found by the `where` argument doesn't exist, create a new imagenhotel with this data.
     */
    create: XOR<imagenhotelCreateInput, imagenhotelUncheckedCreateInput>
    /**
     * In case the imagenhotel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagenhotelUpdateInput, imagenhotelUncheckedUpdateInput>
  }

  /**
   * imagenhotel delete
   */
  export type imagenhotelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
    /**
     * Filter which imagenhotel to delete.
     */
    where: imagenhotelWhereUniqueInput
  }

  /**
   * imagenhotel deleteMany
   */
  export type imagenhotelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagenhotels to delete
     */
    where?: imagenhotelWhereInput
    /**
     * Limit how many imagenhotels to delete.
     */
    limit?: number
  }

  /**
   * imagenhotel without action
   */
  export type imagenhotelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagenhotel
     */
    select?: imagenhotelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagenhotel
     */
    omit?: imagenhotelOmit<ExtArgs> | null
  }


  /**
   * Model promocion
   */

  export type AggregatePromocion = {
    _count: PromocionCountAggregateOutputType | null
    _avg: PromocionAvgAggregateOutputType | null
    _sum: PromocionSumAggregateOutputType | null
    _min: PromocionMinAggregateOutputType | null
    _max: PromocionMaxAggregateOutputType | null
  }

  export type PromocionAvgAggregateOutputType = {
    id: number | null
    precioPromo: number | null
    habitacionId: number | null
  }

  export type PromocionSumAggregateOutputType = {
    id: number | null
    precioPromo: number | null
    habitacionId: number | null
  }

  export type PromocionMinAggregateOutputType = {
    id: number | null
    precioPromo: number | null
    inicio: Date | null
    fin: Date | null
    habitacionId: number | null
  }

  export type PromocionMaxAggregateOutputType = {
    id: number | null
    precioPromo: number | null
    inicio: Date | null
    fin: Date | null
    habitacionId: number | null
  }

  export type PromocionCountAggregateOutputType = {
    id: number
    precioPromo: number
    inicio: number
    fin: number
    habitacionId: number
    _all: number
  }


  export type PromocionAvgAggregateInputType = {
    id?: true
    precioPromo?: true
    habitacionId?: true
  }

  export type PromocionSumAggregateInputType = {
    id?: true
    precioPromo?: true
    habitacionId?: true
  }

  export type PromocionMinAggregateInputType = {
    id?: true
    precioPromo?: true
    inicio?: true
    fin?: true
    habitacionId?: true
  }

  export type PromocionMaxAggregateInputType = {
    id?: true
    precioPromo?: true
    inicio?: true
    fin?: true
    habitacionId?: true
  }

  export type PromocionCountAggregateInputType = {
    id?: true
    precioPromo?: true
    inicio?: true
    fin?: true
    habitacionId?: true
    _all?: true
  }

  export type PromocionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promocion to aggregate.
     */
    where?: promocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promocions to fetch.
     */
    orderBy?: promocionOrderByWithRelationInput | promocionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: promocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promocions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promocions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned promocions
    **/
    _count?: true | PromocionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromocionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromocionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromocionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromocionMaxAggregateInputType
  }

  export type GetPromocionAggregateType<T extends PromocionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromocion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromocion[P]>
      : GetScalarType<T[P], AggregatePromocion[P]>
  }




  export type promocionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promocionWhereInput
    orderBy?: promocionOrderByWithAggregationInput | promocionOrderByWithAggregationInput[]
    by: PromocionScalarFieldEnum[] | PromocionScalarFieldEnum
    having?: promocionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromocionCountAggregateInputType | true
    _avg?: PromocionAvgAggregateInputType
    _sum?: PromocionSumAggregateInputType
    _min?: PromocionMinAggregateInputType
    _max?: PromocionMaxAggregateInputType
  }

  export type PromocionGroupByOutputType = {
    id: number
    precioPromo: number
    inicio: Date
    fin: Date
    habitacionId: number
    _count: PromocionCountAggregateOutputType | null
    _avg: PromocionAvgAggregateOutputType | null
    _sum: PromocionSumAggregateOutputType | null
    _min: PromocionMinAggregateOutputType | null
    _max: PromocionMaxAggregateOutputType | null
  }

  type GetPromocionGroupByPayload<T extends promocionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromocionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromocionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromocionGroupByOutputType[P]>
            : GetScalarType<T[P], PromocionGroupByOutputType[P]>
        }
      >
    >


  export type promocionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    precioPromo?: boolean
    inicio?: boolean
    fin?: boolean
    habitacionId?: boolean
    habitacion?: boolean | habitacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promocion"]>



  export type promocionSelectScalar = {
    id?: boolean
    precioPromo?: boolean
    inicio?: boolean
    fin?: boolean
    habitacionId?: boolean
  }

  export type promocionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "precioPromo" | "inicio" | "fin" | "habitacionId", ExtArgs["result"]["promocion"]>
  export type promocionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habitacion?: boolean | habitacionDefaultArgs<ExtArgs>
  }

  export type $promocionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "promocion"
    objects: {
      habitacion: Prisma.$habitacionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      precioPromo: number
      inicio: Date
      fin: Date
      habitacionId: number
    }, ExtArgs["result"]["promocion"]>
    composites: {}
  }

  type promocionGetPayload<S extends boolean | null | undefined | promocionDefaultArgs> = $Result.GetResult<Prisma.$promocionPayload, S>

  type promocionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<promocionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromocionCountAggregateInputType | true
    }

  export interface promocionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['promocion'], meta: { name: 'promocion' } }
    /**
     * Find zero or one Promocion that matches the filter.
     * @param {promocionFindUniqueArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends promocionFindUniqueArgs>(args: SelectSubset<T, promocionFindUniqueArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Promocion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {promocionFindUniqueOrThrowArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends promocionFindUniqueOrThrowArgs>(args: SelectSubset<T, promocionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promocion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionFindFirstArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends promocionFindFirstArgs>(args?: SelectSubset<T, promocionFindFirstArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promocion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionFindFirstOrThrowArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends promocionFindFirstOrThrowArgs>(args?: SelectSubset<T, promocionFindFirstOrThrowArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Promocions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promocions
     * const promocions = await prisma.promocion.findMany()
     * 
     * // Get first 10 Promocions
     * const promocions = await prisma.promocion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promocionWithIdOnly = await prisma.promocion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends promocionFindManyArgs>(args?: SelectSubset<T, promocionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Promocion.
     * @param {promocionCreateArgs} args - Arguments to create a Promocion.
     * @example
     * // Create one Promocion
     * const Promocion = await prisma.promocion.create({
     *   data: {
     *     // ... data to create a Promocion
     *   }
     * })
     * 
     */
    create<T extends promocionCreateArgs>(args: SelectSubset<T, promocionCreateArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Promocions.
     * @param {promocionCreateManyArgs} args - Arguments to create many Promocions.
     * @example
     * // Create many Promocions
     * const promocion = await prisma.promocion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends promocionCreateManyArgs>(args?: SelectSubset<T, promocionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Promocion.
     * @param {promocionDeleteArgs} args - Arguments to delete one Promocion.
     * @example
     * // Delete one Promocion
     * const Promocion = await prisma.promocion.delete({
     *   where: {
     *     // ... filter to delete one Promocion
     *   }
     * })
     * 
     */
    delete<T extends promocionDeleteArgs>(args: SelectSubset<T, promocionDeleteArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Promocion.
     * @param {promocionUpdateArgs} args - Arguments to update one Promocion.
     * @example
     * // Update one Promocion
     * const promocion = await prisma.promocion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends promocionUpdateArgs>(args: SelectSubset<T, promocionUpdateArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Promocions.
     * @param {promocionDeleteManyArgs} args - Arguments to filter Promocions to delete.
     * @example
     * // Delete a few Promocions
     * const { count } = await prisma.promocion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends promocionDeleteManyArgs>(args?: SelectSubset<T, promocionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promocions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promocions
     * const promocion = await prisma.promocion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends promocionUpdateManyArgs>(args: SelectSubset<T, promocionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promocion.
     * @param {promocionUpsertArgs} args - Arguments to update or create a Promocion.
     * @example
     * // Update or create a Promocion
     * const promocion = await prisma.promocion.upsert({
     *   create: {
     *     // ... data to create a Promocion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promocion we want to update
     *   }
     * })
     */
    upsert<T extends promocionUpsertArgs>(args: SelectSubset<T, promocionUpsertArgs<ExtArgs>>): Prisma__promocionClient<$Result.GetResult<Prisma.$promocionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Promocions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionCountArgs} args - Arguments to filter Promocions to count.
     * @example
     * // Count the number of Promocions
     * const count = await prisma.promocion.count({
     *   where: {
     *     // ... the filter for the Promocions we want to count
     *   }
     * })
    **/
    count<T extends promocionCountArgs>(
      args?: Subset<T, promocionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromocionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promocion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromocionAggregateArgs>(args: Subset<T, PromocionAggregateArgs>): Prisma.PrismaPromise<GetPromocionAggregateType<T>>

    /**
     * Group by Promocion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promocionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends promocionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: promocionGroupByArgs['orderBy'] }
        : { orderBy?: promocionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, promocionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromocionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the promocion model
   */
  readonly fields: promocionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for promocion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__promocionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    habitacion<T extends habitacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, habitacionDefaultArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the promocion model
   */
  interface promocionFieldRefs {
    readonly id: FieldRef<"promocion", 'Int'>
    readonly precioPromo: FieldRef<"promocion", 'Float'>
    readonly inicio: FieldRef<"promocion", 'DateTime'>
    readonly fin: FieldRef<"promocion", 'DateTime'>
    readonly habitacionId: FieldRef<"promocion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * promocion findUnique
   */
  export type promocionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter, which promocion to fetch.
     */
    where: promocionWhereUniqueInput
  }

  /**
   * promocion findUniqueOrThrow
   */
  export type promocionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter, which promocion to fetch.
     */
    where: promocionWhereUniqueInput
  }

  /**
   * promocion findFirst
   */
  export type promocionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter, which promocion to fetch.
     */
    where?: promocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promocions to fetch.
     */
    orderBy?: promocionOrderByWithRelationInput | promocionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promocions.
     */
    cursor?: promocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promocions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promocions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promocions.
     */
    distinct?: PromocionScalarFieldEnum | PromocionScalarFieldEnum[]
  }

  /**
   * promocion findFirstOrThrow
   */
  export type promocionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter, which promocion to fetch.
     */
    where?: promocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promocions to fetch.
     */
    orderBy?: promocionOrderByWithRelationInput | promocionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promocions.
     */
    cursor?: promocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promocions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promocions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promocions.
     */
    distinct?: PromocionScalarFieldEnum | PromocionScalarFieldEnum[]
  }

  /**
   * promocion findMany
   */
  export type promocionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter, which promocions to fetch.
     */
    where?: promocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promocions to fetch.
     */
    orderBy?: promocionOrderByWithRelationInput | promocionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing promocions.
     */
    cursor?: promocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promocions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promocions.
     */
    skip?: number
    distinct?: PromocionScalarFieldEnum | PromocionScalarFieldEnum[]
  }

  /**
   * promocion create
   */
  export type promocionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * The data needed to create a promocion.
     */
    data: XOR<promocionCreateInput, promocionUncheckedCreateInput>
  }

  /**
   * promocion createMany
   */
  export type promocionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many promocions.
     */
    data: promocionCreateManyInput | promocionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * promocion update
   */
  export type promocionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * The data needed to update a promocion.
     */
    data: XOR<promocionUpdateInput, promocionUncheckedUpdateInput>
    /**
     * Choose, which promocion to update.
     */
    where: promocionWhereUniqueInput
  }

  /**
   * promocion updateMany
   */
  export type promocionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update promocions.
     */
    data: XOR<promocionUpdateManyMutationInput, promocionUncheckedUpdateManyInput>
    /**
     * Filter which promocions to update
     */
    where?: promocionWhereInput
    /**
     * Limit how many promocions to update.
     */
    limit?: number
  }

  /**
   * promocion upsert
   */
  export type promocionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * The filter to search for the promocion to update in case it exists.
     */
    where: promocionWhereUniqueInput
    /**
     * In case the promocion found by the `where` argument doesn't exist, create a new promocion with this data.
     */
    create: XOR<promocionCreateInput, promocionUncheckedCreateInput>
    /**
     * In case the promocion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<promocionUpdateInput, promocionUncheckedUpdateInput>
  }

  /**
   * promocion delete
   */
  export type promocionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
    /**
     * Filter which promocion to delete.
     */
    where: promocionWhereUniqueInput
  }

  /**
   * promocion deleteMany
   */
  export type promocionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promocions to delete
     */
    where?: promocionWhereInput
    /**
     * Limit how many promocions to delete.
     */
    limit?: number
  }

  /**
   * promocion without action
   */
  export type promocionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promocion
     */
    select?: promocionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the promocion
     */
    omit?: promocionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promocionInclude<ExtArgs> | null
  }


  /**
   * Model reserva
   */

  export type AggregateReserva = {
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  export type ReservaAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ReservaSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ReservaMinAggregateOutputType = {
    id: number | null
    nombreCliente: string | null
    fechaEntrada: Date | null
    fechaSalida: Date | null
    status: string | null
    telefono: string | null
    email: string | null
    clienteId: number | null
    tipoHabitacion: string | null
  }

  export type ReservaMaxAggregateOutputType = {
    id: number | null
    nombreCliente: string | null
    fechaEntrada: Date | null
    fechaSalida: Date | null
    status: string | null
    telefono: string | null
    email: string | null
    clienteId: number | null
    tipoHabitacion: string | null
  }

  export type ReservaCountAggregateOutputType = {
    id: number
    nombreCliente: number
    fechaEntrada: number
    fechaSalida: number
    status: number
    telefono: number
    email: number
    clienteId: number
    tipoHabitacion: number
    _all: number
  }


  export type ReservaAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ReservaSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ReservaMinAggregateInputType = {
    id?: true
    nombreCliente?: true
    fechaEntrada?: true
    fechaSalida?: true
    status?: true
    telefono?: true
    email?: true
    clienteId?: true
    tipoHabitacion?: true
  }

  export type ReservaMaxAggregateInputType = {
    id?: true
    nombreCliente?: true
    fechaEntrada?: true
    fechaSalida?: true
    status?: true
    telefono?: true
    email?: true
    clienteId?: true
    tipoHabitacion?: true
  }

  export type ReservaCountAggregateInputType = {
    id?: true
    nombreCliente?: true
    fechaEntrada?: true
    fechaSalida?: true
    status?: true
    telefono?: true
    email?: true
    clienteId?: true
    tipoHabitacion?: true
    _all?: true
  }

  export type ReservaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reserva to aggregate.
     */
    where?: reservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservas to fetch.
     */
    orderBy?: reservaOrderByWithRelationInput | reservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reservas
    **/
    _count?: true | ReservaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservaMaxAggregateInputType
  }

  export type GetReservaAggregateType<T extends ReservaAggregateArgs> = {
        [P in keyof T & keyof AggregateReserva]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReserva[P]>
      : GetScalarType<T[P], AggregateReserva[P]>
  }




  export type reservaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservaWhereInput
    orderBy?: reservaOrderByWithAggregationInput | reservaOrderByWithAggregationInput[]
    by: ReservaScalarFieldEnum[] | ReservaScalarFieldEnum
    having?: reservaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservaCountAggregateInputType | true
    _avg?: ReservaAvgAggregateInputType
    _sum?: ReservaSumAggregateInputType
    _min?: ReservaMinAggregateInputType
    _max?: ReservaMaxAggregateInputType
  }

  export type ReservaGroupByOutputType = {
    id: number
    nombreCliente: string | null
    fechaEntrada: Date
    fechaSalida: Date
    status: string
    telefono: string | null
    email: string | null
    clienteId: number | null
    tipoHabitacion: string | null
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  type GetReservaGroupByPayload<T extends reservaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservaGroupByOutputType[P]>
            : GetScalarType<T[P], ReservaGroupByOutputType[P]>
        }
      >
    >


  export type reservaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreCliente?: boolean
    fechaEntrada?: boolean
    fechaSalida?: boolean
    status?: boolean
    telefono?: boolean
    email?: boolean
    clienteId?: boolean
    tipoHabitacion?: boolean
    cliente?: boolean | reserva$clienteArgs<ExtArgs>
    reservahabitacion?: boolean | reserva$reservahabitacionArgs<ExtArgs>
    _count?: boolean | ReservaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reserva"]>



  export type reservaSelectScalar = {
    id?: boolean
    nombreCliente?: boolean
    fechaEntrada?: boolean
    fechaSalida?: boolean
    status?: boolean
    telefono?: boolean
    email?: boolean
    clienteId?: boolean
    tipoHabitacion?: boolean
  }

  export type reservaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombreCliente" | "fechaEntrada" | "fechaSalida" | "status" | "telefono" | "email" | "clienteId" | "tipoHabitacion", ExtArgs["result"]["reserva"]>
  export type reservaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | reserva$clienteArgs<ExtArgs>
    reservahabitacion?: boolean | reserva$reservahabitacionArgs<ExtArgs>
    _count?: boolean | ReservaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $reservaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reserva"
    objects: {
      cliente: Prisma.$clientePayload<ExtArgs> | null
      reservahabitacion: Prisma.$reservahabitacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombreCliente: string | null
      fechaEntrada: Date
      fechaSalida: Date
      status: string
      telefono: string | null
      email: string | null
      clienteId: number | null
      tipoHabitacion: string | null
    }, ExtArgs["result"]["reserva"]>
    composites: {}
  }

  type reservaGetPayload<S extends boolean | null | undefined | reservaDefaultArgs> = $Result.GetResult<Prisma.$reservaPayload, S>

  type reservaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reservaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReservaCountAggregateInputType | true
    }

  export interface reservaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reserva'], meta: { name: 'reserva' } }
    /**
     * Find zero or one Reserva that matches the filter.
     * @param {reservaFindUniqueArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reservaFindUniqueArgs>(args: SelectSubset<T, reservaFindUniqueArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reserva that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reservaFindUniqueOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reservaFindUniqueOrThrowArgs>(args: SelectSubset<T, reservaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reserva that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaFindFirstArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reservaFindFirstArgs>(args?: SelectSubset<T, reservaFindFirstArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reserva that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaFindFirstOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reservaFindFirstOrThrowArgs>(args?: SelectSubset<T, reservaFindFirstOrThrowArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservas
     * const reservas = await prisma.reserva.findMany()
     * 
     * // Get first 10 Reservas
     * const reservas = await prisma.reserva.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservaWithIdOnly = await prisma.reserva.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reservaFindManyArgs>(args?: SelectSubset<T, reservaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reserva.
     * @param {reservaCreateArgs} args - Arguments to create a Reserva.
     * @example
     * // Create one Reserva
     * const Reserva = await prisma.reserva.create({
     *   data: {
     *     // ... data to create a Reserva
     *   }
     * })
     * 
     */
    create<T extends reservaCreateArgs>(args: SelectSubset<T, reservaCreateArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reservas.
     * @param {reservaCreateManyArgs} args - Arguments to create many Reservas.
     * @example
     * // Create many Reservas
     * const reserva = await prisma.reserva.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reservaCreateManyArgs>(args?: SelectSubset<T, reservaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reserva.
     * @param {reservaDeleteArgs} args - Arguments to delete one Reserva.
     * @example
     * // Delete one Reserva
     * const Reserva = await prisma.reserva.delete({
     *   where: {
     *     // ... filter to delete one Reserva
     *   }
     * })
     * 
     */
    delete<T extends reservaDeleteArgs>(args: SelectSubset<T, reservaDeleteArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reserva.
     * @param {reservaUpdateArgs} args - Arguments to update one Reserva.
     * @example
     * // Update one Reserva
     * const reserva = await prisma.reserva.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reservaUpdateArgs>(args: SelectSubset<T, reservaUpdateArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reservas.
     * @param {reservaDeleteManyArgs} args - Arguments to filter Reservas to delete.
     * @example
     * // Delete a few Reservas
     * const { count } = await prisma.reserva.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reservaDeleteManyArgs>(args?: SelectSubset<T, reservaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservas
     * const reserva = await prisma.reserva.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reservaUpdateManyArgs>(args: SelectSubset<T, reservaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reserva.
     * @param {reservaUpsertArgs} args - Arguments to update or create a Reserva.
     * @example
     * // Update or create a Reserva
     * const reserva = await prisma.reserva.upsert({
     *   create: {
     *     // ... data to create a Reserva
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reserva we want to update
     *   }
     * })
     */
    upsert<T extends reservaUpsertArgs>(args: SelectSubset<T, reservaUpsertArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaCountArgs} args - Arguments to filter Reservas to count.
     * @example
     * // Count the number of Reservas
     * const count = await prisma.reserva.count({
     *   where: {
     *     // ... the filter for the Reservas we want to count
     *   }
     * })
    **/
    count<T extends reservaCountArgs>(
      args?: Subset<T, reservaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservaAggregateArgs>(args: Subset<T, ReservaAggregateArgs>): Prisma.PrismaPromise<GetReservaAggregateType<T>>

    /**
     * Group by Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reservaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reservaGroupByArgs['orderBy'] }
        : { orderBy?: reservaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reservaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reserva model
   */
  readonly fields: reservaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reserva.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reservaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends reserva$clienteArgs<ExtArgs> = {}>(args?: Subset<T, reserva$clienteArgs<ExtArgs>>): Prisma__clienteClient<$Result.GetResult<Prisma.$clientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reservahabitacion<T extends reserva$reservahabitacionArgs<ExtArgs> = {}>(args?: Subset<T, reserva$reservahabitacionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reserva model
   */
  interface reservaFieldRefs {
    readonly id: FieldRef<"reserva", 'Int'>
    readonly nombreCliente: FieldRef<"reserva", 'String'>
    readonly fechaEntrada: FieldRef<"reserva", 'DateTime'>
    readonly fechaSalida: FieldRef<"reserva", 'DateTime'>
    readonly status: FieldRef<"reserva", 'String'>
    readonly telefono: FieldRef<"reserva", 'String'>
    readonly email: FieldRef<"reserva", 'String'>
    readonly clienteId: FieldRef<"reserva", 'Int'>
    readonly tipoHabitacion: FieldRef<"reserva", 'String'>
  }
    

  // Custom InputTypes
  /**
   * reserva findUnique
   */
  export type reservaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter, which reserva to fetch.
     */
    where: reservaWhereUniqueInput
  }

  /**
   * reserva findUniqueOrThrow
   */
  export type reservaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter, which reserva to fetch.
     */
    where: reservaWhereUniqueInput
  }

  /**
   * reserva findFirst
   */
  export type reservaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter, which reserva to fetch.
     */
    where?: reservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservas to fetch.
     */
    orderBy?: reservaOrderByWithRelationInput | reservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservas.
     */
    cursor?: reservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * reserva findFirstOrThrow
   */
  export type reservaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter, which reserva to fetch.
     */
    where?: reservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservas to fetch.
     */
    orderBy?: reservaOrderByWithRelationInput | reservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservas.
     */
    cursor?: reservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * reserva findMany
   */
  export type reservaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter, which reservas to fetch.
     */
    where?: reservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservas to fetch.
     */
    orderBy?: reservaOrderByWithRelationInput | reservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reservas.
     */
    cursor?: reservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservas.
     */
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * reserva create
   */
  export type reservaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * The data needed to create a reserva.
     */
    data: XOR<reservaCreateInput, reservaUncheckedCreateInput>
  }

  /**
   * reserva createMany
   */
  export type reservaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reservas.
     */
    data: reservaCreateManyInput | reservaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reserva update
   */
  export type reservaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * The data needed to update a reserva.
     */
    data: XOR<reservaUpdateInput, reservaUncheckedUpdateInput>
    /**
     * Choose, which reserva to update.
     */
    where: reservaWhereUniqueInput
  }

  /**
   * reserva updateMany
   */
  export type reservaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reservas.
     */
    data: XOR<reservaUpdateManyMutationInput, reservaUncheckedUpdateManyInput>
    /**
     * Filter which reservas to update
     */
    where?: reservaWhereInput
    /**
     * Limit how many reservas to update.
     */
    limit?: number
  }

  /**
   * reserva upsert
   */
  export type reservaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * The filter to search for the reserva to update in case it exists.
     */
    where: reservaWhereUniqueInput
    /**
     * In case the reserva found by the `where` argument doesn't exist, create a new reserva with this data.
     */
    create: XOR<reservaCreateInput, reservaUncheckedCreateInput>
    /**
     * In case the reserva was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reservaUpdateInput, reservaUncheckedUpdateInput>
  }

  /**
   * reserva delete
   */
  export type reservaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
    /**
     * Filter which reserva to delete.
     */
    where: reservaWhereUniqueInput
  }

  /**
   * reserva deleteMany
   */
  export type reservaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservas to delete
     */
    where?: reservaWhereInput
    /**
     * Limit how many reservas to delete.
     */
    limit?: number
  }

  /**
   * reserva.cliente
   */
  export type reserva$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cliente
     */
    select?: clienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cliente
     */
    omit?: clienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clienteInclude<ExtArgs> | null
    where?: clienteWhereInput
  }

  /**
   * reserva.reservahabitacion
   */
  export type reserva$reservahabitacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    where?: reservahabitacionWhereInput
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    cursor?: reservahabitacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservahabitacionScalarFieldEnum | ReservahabitacionScalarFieldEnum[]
  }

  /**
   * reserva without action
   */
  export type reservaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reserva
     */
    select?: reservaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reserva
     */
    omit?: reservaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservaInclude<ExtArgs> | null
  }


  /**
   * Model reservahabitacion
   */

  export type AggregateReservahabitacion = {
    _count: ReservahabitacionCountAggregateOutputType | null
    _avg: ReservahabitacionAvgAggregateOutputType | null
    _sum: ReservahabitacionSumAggregateOutputType | null
    _min: ReservahabitacionMinAggregateOutputType | null
    _max: ReservahabitacionMaxAggregateOutputType | null
  }

  export type ReservahabitacionAvgAggregateOutputType = {
    id: number | null
    reservaId: number | null
    habitacionId: number | null
  }

  export type ReservahabitacionSumAggregateOutputType = {
    id: number | null
    reservaId: number | null
    habitacionId: number | null
  }

  export type ReservahabitacionMinAggregateOutputType = {
    id: number | null
    reservaId: number | null
    habitacionId: number | null
  }

  export type ReservahabitacionMaxAggregateOutputType = {
    id: number | null
    reservaId: number | null
    habitacionId: number | null
  }

  export type ReservahabitacionCountAggregateOutputType = {
    id: number
    reservaId: number
    habitacionId: number
    _all: number
  }


  export type ReservahabitacionAvgAggregateInputType = {
    id?: true
    reservaId?: true
    habitacionId?: true
  }

  export type ReservahabitacionSumAggregateInputType = {
    id?: true
    reservaId?: true
    habitacionId?: true
  }

  export type ReservahabitacionMinAggregateInputType = {
    id?: true
    reservaId?: true
    habitacionId?: true
  }

  export type ReservahabitacionMaxAggregateInputType = {
    id?: true
    reservaId?: true
    habitacionId?: true
  }

  export type ReservahabitacionCountAggregateInputType = {
    id?: true
    reservaId?: true
    habitacionId?: true
    _all?: true
  }

  export type ReservahabitacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservahabitacion to aggregate.
     */
    where?: reservahabitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservahabitacions to fetch.
     */
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reservahabitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservahabitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservahabitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reservahabitacions
    **/
    _count?: true | ReservahabitacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservahabitacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservahabitacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservahabitacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservahabitacionMaxAggregateInputType
  }

  export type GetReservahabitacionAggregateType<T extends ReservahabitacionAggregateArgs> = {
        [P in keyof T & keyof AggregateReservahabitacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservahabitacion[P]>
      : GetScalarType<T[P], AggregateReservahabitacion[P]>
  }




  export type reservahabitacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservahabitacionWhereInput
    orderBy?: reservahabitacionOrderByWithAggregationInput | reservahabitacionOrderByWithAggregationInput[]
    by: ReservahabitacionScalarFieldEnum[] | ReservahabitacionScalarFieldEnum
    having?: reservahabitacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservahabitacionCountAggregateInputType | true
    _avg?: ReservahabitacionAvgAggregateInputType
    _sum?: ReservahabitacionSumAggregateInputType
    _min?: ReservahabitacionMinAggregateInputType
    _max?: ReservahabitacionMaxAggregateInputType
  }

  export type ReservahabitacionGroupByOutputType = {
    id: number
    reservaId: number
    habitacionId: number
    _count: ReservahabitacionCountAggregateOutputType | null
    _avg: ReservahabitacionAvgAggregateOutputType | null
    _sum: ReservahabitacionSumAggregateOutputType | null
    _min: ReservahabitacionMinAggregateOutputType | null
    _max: ReservahabitacionMaxAggregateOutputType | null
  }

  type GetReservahabitacionGroupByPayload<T extends reservahabitacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservahabitacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservahabitacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservahabitacionGroupByOutputType[P]>
            : GetScalarType<T[P], ReservahabitacionGroupByOutputType[P]>
        }
      >
    >


  export type reservahabitacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservaId?: boolean
    habitacionId?: boolean
    habitacion?: boolean | habitacionDefaultArgs<ExtArgs>
    reserva?: boolean | reservaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservahabitacion"]>



  export type reservahabitacionSelectScalar = {
    id?: boolean
    reservaId?: boolean
    habitacionId?: boolean
  }

  export type reservahabitacionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reservaId" | "habitacionId", ExtArgs["result"]["reservahabitacion"]>
  export type reservahabitacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habitacion?: boolean | habitacionDefaultArgs<ExtArgs>
    reserva?: boolean | reservaDefaultArgs<ExtArgs>
  }

  export type $reservahabitacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reservahabitacion"
    objects: {
      habitacion: Prisma.$habitacionPayload<ExtArgs>
      reserva: Prisma.$reservaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reservaId: number
      habitacionId: number
    }, ExtArgs["result"]["reservahabitacion"]>
    composites: {}
  }

  type reservahabitacionGetPayload<S extends boolean | null | undefined | reservahabitacionDefaultArgs> = $Result.GetResult<Prisma.$reservahabitacionPayload, S>

  type reservahabitacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reservahabitacionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReservahabitacionCountAggregateInputType | true
    }

  export interface reservahabitacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reservahabitacion'], meta: { name: 'reservahabitacion' } }
    /**
     * Find zero or one Reservahabitacion that matches the filter.
     * @param {reservahabitacionFindUniqueArgs} args - Arguments to find a Reservahabitacion
     * @example
     * // Get one Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reservahabitacionFindUniqueArgs>(args: SelectSubset<T, reservahabitacionFindUniqueArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reservahabitacion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reservahabitacionFindUniqueOrThrowArgs} args - Arguments to find a Reservahabitacion
     * @example
     * // Get one Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reservahabitacionFindUniqueOrThrowArgs>(args: SelectSubset<T, reservahabitacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservahabitacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionFindFirstArgs} args - Arguments to find a Reservahabitacion
     * @example
     * // Get one Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reservahabitacionFindFirstArgs>(args?: SelectSubset<T, reservahabitacionFindFirstArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservahabitacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionFindFirstOrThrowArgs} args - Arguments to find a Reservahabitacion
     * @example
     * // Get one Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reservahabitacionFindFirstOrThrowArgs>(args?: SelectSubset<T, reservahabitacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reservahabitacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservahabitacions
     * const reservahabitacions = await prisma.reservahabitacion.findMany()
     * 
     * // Get first 10 Reservahabitacions
     * const reservahabitacions = await prisma.reservahabitacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservahabitacionWithIdOnly = await prisma.reservahabitacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reservahabitacionFindManyArgs>(args?: SelectSubset<T, reservahabitacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reservahabitacion.
     * @param {reservahabitacionCreateArgs} args - Arguments to create a Reservahabitacion.
     * @example
     * // Create one Reservahabitacion
     * const Reservahabitacion = await prisma.reservahabitacion.create({
     *   data: {
     *     // ... data to create a Reservahabitacion
     *   }
     * })
     * 
     */
    create<T extends reservahabitacionCreateArgs>(args: SelectSubset<T, reservahabitacionCreateArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reservahabitacions.
     * @param {reservahabitacionCreateManyArgs} args - Arguments to create many Reservahabitacions.
     * @example
     * // Create many Reservahabitacions
     * const reservahabitacion = await prisma.reservahabitacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reservahabitacionCreateManyArgs>(args?: SelectSubset<T, reservahabitacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservahabitacion.
     * @param {reservahabitacionDeleteArgs} args - Arguments to delete one Reservahabitacion.
     * @example
     * // Delete one Reservahabitacion
     * const Reservahabitacion = await prisma.reservahabitacion.delete({
     *   where: {
     *     // ... filter to delete one Reservahabitacion
     *   }
     * })
     * 
     */
    delete<T extends reservahabitacionDeleteArgs>(args: SelectSubset<T, reservahabitacionDeleteArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reservahabitacion.
     * @param {reservahabitacionUpdateArgs} args - Arguments to update one Reservahabitacion.
     * @example
     * // Update one Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reservahabitacionUpdateArgs>(args: SelectSubset<T, reservahabitacionUpdateArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reservahabitacions.
     * @param {reservahabitacionDeleteManyArgs} args - Arguments to filter Reservahabitacions to delete.
     * @example
     * // Delete a few Reservahabitacions
     * const { count } = await prisma.reservahabitacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reservahabitacionDeleteManyArgs>(args?: SelectSubset<T, reservahabitacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservahabitacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservahabitacions
     * const reservahabitacion = await prisma.reservahabitacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reservahabitacionUpdateManyArgs>(args: SelectSubset<T, reservahabitacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservahabitacion.
     * @param {reservahabitacionUpsertArgs} args - Arguments to update or create a Reservahabitacion.
     * @example
     * // Update or create a Reservahabitacion
     * const reservahabitacion = await prisma.reservahabitacion.upsert({
     *   create: {
     *     // ... data to create a Reservahabitacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservahabitacion we want to update
     *   }
     * })
     */
    upsert<T extends reservahabitacionUpsertArgs>(args: SelectSubset<T, reservahabitacionUpsertArgs<ExtArgs>>): Prisma__reservahabitacionClient<$Result.GetResult<Prisma.$reservahabitacionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reservahabitacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionCountArgs} args - Arguments to filter Reservahabitacions to count.
     * @example
     * // Count the number of Reservahabitacions
     * const count = await prisma.reservahabitacion.count({
     *   where: {
     *     // ... the filter for the Reservahabitacions we want to count
     *   }
     * })
    **/
    count<T extends reservahabitacionCountArgs>(
      args?: Subset<T, reservahabitacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservahabitacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservahabitacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservahabitacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservahabitacionAggregateArgs>(args: Subset<T, ReservahabitacionAggregateArgs>): Prisma.PrismaPromise<GetReservahabitacionAggregateType<T>>

    /**
     * Group by Reservahabitacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservahabitacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reservahabitacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reservahabitacionGroupByArgs['orderBy'] }
        : { orderBy?: reservahabitacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reservahabitacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservahabitacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reservahabitacion model
   */
  readonly fields: reservahabitacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reservahabitacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reservahabitacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    habitacion<T extends habitacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, habitacionDefaultArgs<ExtArgs>>): Prisma__habitacionClient<$Result.GetResult<Prisma.$habitacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reserva<T extends reservaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, reservaDefaultArgs<ExtArgs>>): Prisma__reservaClient<$Result.GetResult<Prisma.$reservaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reservahabitacion model
   */
  interface reservahabitacionFieldRefs {
    readonly id: FieldRef<"reservahabitacion", 'Int'>
    readonly reservaId: FieldRef<"reservahabitacion", 'Int'>
    readonly habitacionId: FieldRef<"reservahabitacion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * reservahabitacion findUnique
   */
  export type reservahabitacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter, which reservahabitacion to fetch.
     */
    where: reservahabitacionWhereUniqueInput
  }

  /**
   * reservahabitacion findUniqueOrThrow
   */
  export type reservahabitacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter, which reservahabitacion to fetch.
     */
    where: reservahabitacionWhereUniqueInput
  }

  /**
   * reservahabitacion findFirst
   */
  export type reservahabitacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter, which reservahabitacion to fetch.
     */
    where?: reservahabitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservahabitacions to fetch.
     */
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservahabitacions.
     */
    cursor?: reservahabitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservahabitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservahabitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservahabitacions.
     */
    distinct?: ReservahabitacionScalarFieldEnum | ReservahabitacionScalarFieldEnum[]
  }

  /**
   * reservahabitacion findFirstOrThrow
   */
  export type reservahabitacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter, which reservahabitacion to fetch.
     */
    where?: reservahabitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservahabitacions to fetch.
     */
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservahabitacions.
     */
    cursor?: reservahabitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservahabitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservahabitacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservahabitacions.
     */
    distinct?: ReservahabitacionScalarFieldEnum | ReservahabitacionScalarFieldEnum[]
  }

  /**
   * reservahabitacion findMany
   */
  export type reservahabitacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter, which reservahabitacions to fetch.
     */
    where?: reservahabitacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservahabitacions to fetch.
     */
    orderBy?: reservahabitacionOrderByWithRelationInput | reservahabitacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reservahabitacions.
     */
    cursor?: reservahabitacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservahabitacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservahabitacions.
     */
    skip?: number
    distinct?: ReservahabitacionScalarFieldEnum | ReservahabitacionScalarFieldEnum[]
  }

  /**
   * reservahabitacion create
   */
  export type reservahabitacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * The data needed to create a reservahabitacion.
     */
    data: XOR<reservahabitacionCreateInput, reservahabitacionUncheckedCreateInput>
  }

  /**
   * reservahabitacion createMany
   */
  export type reservahabitacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reservahabitacions.
     */
    data: reservahabitacionCreateManyInput | reservahabitacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reservahabitacion update
   */
  export type reservahabitacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * The data needed to update a reservahabitacion.
     */
    data: XOR<reservahabitacionUpdateInput, reservahabitacionUncheckedUpdateInput>
    /**
     * Choose, which reservahabitacion to update.
     */
    where: reservahabitacionWhereUniqueInput
  }

  /**
   * reservahabitacion updateMany
   */
  export type reservahabitacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reservahabitacions.
     */
    data: XOR<reservahabitacionUpdateManyMutationInput, reservahabitacionUncheckedUpdateManyInput>
    /**
     * Filter which reservahabitacions to update
     */
    where?: reservahabitacionWhereInput
    /**
     * Limit how many reservahabitacions to update.
     */
    limit?: number
  }

  /**
   * reservahabitacion upsert
   */
  export type reservahabitacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * The filter to search for the reservahabitacion to update in case it exists.
     */
    where: reservahabitacionWhereUniqueInput
    /**
     * In case the reservahabitacion found by the `where` argument doesn't exist, create a new reservahabitacion with this data.
     */
    create: XOR<reservahabitacionCreateInput, reservahabitacionUncheckedCreateInput>
    /**
     * In case the reservahabitacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reservahabitacionUpdateInput, reservahabitacionUncheckedUpdateInput>
  }

  /**
   * reservahabitacion delete
   */
  export type reservahabitacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
    /**
     * Filter which reservahabitacion to delete.
     */
    where: reservahabitacionWhereUniqueInput
  }

  /**
   * reservahabitacion deleteMany
   */
  export type reservahabitacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservahabitacions to delete
     */
    where?: reservahabitacionWhereInput
    /**
     * Limit how many reservahabitacions to delete.
     */
    limit?: number
  }

  /**
   * reservahabitacion without action
   */
  export type reservahabitacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservahabitacion
     */
    select?: reservahabitacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reservahabitacion
     */
    omit?: reservahabitacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservahabitacionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdministradorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo',
    password: 'password'
  };

  export type AdministradorScalarFieldEnum = (typeof AdministradorScalarFieldEnum)[keyof typeof AdministradorScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    telefono: 'telefono',
    email: 'email'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const HabitacionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    precio: 'precio',
    descripcion: 'descripcion',
    imagenUrl: 'imagenUrl',
    tipoHabitacion: 'tipoHabitacion'
  };

  export type HabitacionScalarFieldEnum = (typeof HabitacionScalarFieldEnum)[keyof typeof HabitacionScalarFieldEnum]


  export const ImagenhotelScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type ImagenhotelScalarFieldEnum = (typeof ImagenhotelScalarFieldEnum)[keyof typeof ImagenhotelScalarFieldEnum]


  export const PromocionScalarFieldEnum: {
    id: 'id',
    precioPromo: 'precioPromo',
    inicio: 'inicio',
    fin: 'fin',
    habitacionId: 'habitacionId'
  };

  export type PromocionScalarFieldEnum = (typeof PromocionScalarFieldEnum)[keyof typeof PromocionScalarFieldEnum]


  export const ReservaScalarFieldEnum: {
    id: 'id',
    nombreCliente: 'nombreCliente',
    fechaEntrada: 'fechaEntrada',
    fechaSalida: 'fechaSalida',
    status: 'status',
    telefono: 'telefono',
    email: 'email',
    clienteId: 'clienteId',
    tipoHabitacion: 'tipoHabitacion'
  };

  export type ReservaScalarFieldEnum = (typeof ReservaScalarFieldEnum)[keyof typeof ReservaScalarFieldEnum]


  export const ReservahabitacionScalarFieldEnum: {
    id: 'id',
    reservaId: 'reservaId',
    habitacionId: 'habitacionId'
  };

  export type ReservahabitacionScalarFieldEnum = (typeof ReservahabitacionScalarFieldEnum)[keyof typeof ReservahabitacionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const administradorOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    correo: 'correo',
    password: 'password'
  };

  export type administradorOrderByRelevanceFieldEnum = (typeof administradorOrderByRelevanceFieldEnum)[keyof typeof administradorOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const clienteOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    apellido: 'apellido',
    telefono: 'telefono',
    email: 'email'
  };

  export type clienteOrderByRelevanceFieldEnum = (typeof clienteOrderByRelevanceFieldEnum)[keyof typeof clienteOrderByRelevanceFieldEnum]


  export const habitacionOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    descripcion: 'descripcion',
    imagenUrl: 'imagenUrl',
    tipoHabitacion: 'tipoHabitacion'
  };

  export type habitacionOrderByRelevanceFieldEnum = (typeof habitacionOrderByRelevanceFieldEnum)[keyof typeof habitacionOrderByRelevanceFieldEnum]


  export const imagenhotelOrderByRelevanceFieldEnum: {
    url: 'url'
  };

  export type imagenhotelOrderByRelevanceFieldEnum = (typeof imagenhotelOrderByRelevanceFieldEnum)[keyof typeof imagenhotelOrderByRelevanceFieldEnum]


  export const reservaOrderByRelevanceFieldEnum: {
    nombreCliente: 'nombreCliente',
    status: 'status',
    telefono: 'telefono',
    email: 'email',
    tipoHabitacion: 'tipoHabitacion'
  };

  export type reservaOrderByRelevanceFieldEnum = (typeof reservaOrderByRelevanceFieldEnum)[keyof typeof reservaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type administradorWhereInput = {
    AND?: administradorWhereInput | administradorWhereInput[]
    OR?: administradorWhereInput[]
    NOT?: administradorWhereInput | administradorWhereInput[]
    id?: IntFilter<"administrador"> | number
    nombre?: StringFilter<"administrador"> | string
    correo?: StringFilter<"administrador"> | string
    password?: StringFilter<"administrador"> | string
  }

  export type administradorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    password?: SortOrder
    _relevance?: administradorOrderByRelevanceInput
  }

  export type administradorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: administradorWhereInput | administradorWhereInput[]
    OR?: administradorWhereInput[]
    NOT?: administradorWhereInput | administradorWhereInput[]
    nombre?: StringFilter<"administrador"> | string
    password?: StringFilter<"administrador"> | string
  }, "id" | "correo">

  export type administradorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    password?: SortOrder
    _count?: administradorCountOrderByAggregateInput
    _avg?: administradorAvgOrderByAggregateInput
    _max?: administradorMaxOrderByAggregateInput
    _min?: administradorMinOrderByAggregateInput
    _sum?: administradorSumOrderByAggregateInput
  }

  export type administradorScalarWhereWithAggregatesInput = {
    AND?: administradorScalarWhereWithAggregatesInput | administradorScalarWhereWithAggregatesInput[]
    OR?: administradorScalarWhereWithAggregatesInput[]
    NOT?: administradorScalarWhereWithAggregatesInput | administradorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"administrador"> | number
    nombre?: StringWithAggregatesFilter<"administrador"> | string
    correo?: StringWithAggregatesFilter<"administrador"> | string
    password?: StringWithAggregatesFilter<"administrador"> | string
  }

  export type clienteWhereInput = {
    AND?: clienteWhereInput | clienteWhereInput[]
    OR?: clienteWhereInput[]
    NOT?: clienteWhereInput | clienteWhereInput[]
    id?: IntFilter<"cliente"> | number
    nombre?: StringFilter<"cliente"> | string
    apellido?: StringFilter<"cliente"> | string
    telefono?: StringNullableFilter<"cliente"> | string | null
    email?: StringFilter<"cliente"> | string
    reserva?: ReservaListRelationFilter
  }

  export type clienteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrder
    reserva?: reservaOrderByRelationAggregateInput
    _relevance?: clienteOrderByRelevanceInput
  }

  export type clienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: clienteWhereInput | clienteWhereInput[]
    OR?: clienteWhereInput[]
    NOT?: clienteWhereInput | clienteWhereInput[]
    nombre?: StringFilter<"cliente"> | string
    apellido?: StringFilter<"cliente"> | string
    telefono?: StringNullableFilter<"cliente"> | string | null
    reserva?: ReservaListRelationFilter
  }, "id" | "email">

  export type clienteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrder
    _count?: clienteCountOrderByAggregateInput
    _avg?: clienteAvgOrderByAggregateInput
    _max?: clienteMaxOrderByAggregateInput
    _min?: clienteMinOrderByAggregateInput
    _sum?: clienteSumOrderByAggregateInput
  }

  export type clienteScalarWhereWithAggregatesInput = {
    AND?: clienteScalarWhereWithAggregatesInput | clienteScalarWhereWithAggregatesInput[]
    OR?: clienteScalarWhereWithAggregatesInput[]
    NOT?: clienteScalarWhereWithAggregatesInput | clienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cliente"> | number
    nombre?: StringWithAggregatesFilter<"cliente"> | string
    apellido?: StringWithAggregatesFilter<"cliente"> | string
    telefono?: StringNullableWithAggregatesFilter<"cliente"> | string | null
    email?: StringWithAggregatesFilter<"cliente"> | string
  }

  export type habitacionWhereInput = {
    AND?: habitacionWhereInput | habitacionWhereInput[]
    OR?: habitacionWhereInput[]
    NOT?: habitacionWhereInput | habitacionWhereInput[]
    id?: IntFilter<"habitacion"> | number
    nombre?: StringFilter<"habitacion"> | string
    precio?: FloatFilter<"habitacion"> | number
    descripcion?: StringNullableFilter<"habitacion"> | string | null
    imagenUrl?: StringFilter<"habitacion"> | string
    tipoHabitacion?: StringNullableFilter<"habitacion"> | string | null
    promocion?: PromocionListRelationFilter
    reservahabitacion?: ReservahabitacionListRelationFilter
  }

  export type habitacionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    imagenUrl?: SortOrder
    tipoHabitacion?: SortOrderInput | SortOrder
    promocion?: promocionOrderByRelationAggregateInput
    reservahabitacion?: reservahabitacionOrderByRelationAggregateInput
    _relevance?: habitacionOrderByRelevanceInput
  }

  export type habitacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: habitacionWhereInput | habitacionWhereInput[]
    OR?: habitacionWhereInput[]
    NOT?: habitacionWhereInput | habitacionWhereInput[]
    nombre?: StringFilter<"habitacion"> | string
    precio?: FloatFilter<"habitacion"> | number
    descripcion?: StringNullableFilter<"habitacion"> | string | null
    imagenUrl?: StringFilter<"habitacion"> | string
    tipoHabitacion?: StringNullableFilter<"habitacion"> | string | null
    promocion?: PromocionListRelationFilter
    reservahabitacion?: ReservahabitacionListRelationFilter
  }, "id">

  export type habitacionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    imagenUrl?: SortOrder
    tipoHabitacion?: SortOrderInput | SortOrder
    _count?: habitacionCountOrderByAggregateInput
    _avg?: habitacionAvgOrderByAggregateInput
    _max?: habitacionMaxOrderByAggregateInput
    _min?: habitacionMinOrderByAggregateInput
    _sum?: habitacionSumOrderByAggregateInput
  }

  export type habitacionScalarWhereWithAggregatesInput = {
    AND?: habitacionScalarWhereWithAggregatesInput | habitacionScalarWhereWithAggregatesInput[]
    OR?: habitacionScalarWhereWithAggregatesInput[]
    NOT?: habitacionScalarWhereWithAggregatesInput | habitacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"habitacion"> | number
    nombre?: StringWithAggregatesFilter<"habitacion"> | string
    precio?: FloatWithAggregatesFilter<"habitacion"> | number
    descripcion?: StringNullableWithAggregatesFilter<"habitacion"> | string | null
    imagenUrl?: StringWithAggregatesFilter<"habitacion"> | string
    tipoHabitacion?: StringNullableWithAggregatesFilter<"habitacion"> | string | null
  }

  export type imagenhotelWhereInput = {
    AND?: imagenhotelWhereInput | imagenhotelWhereInput[]
    OR?: imagenhotelWhereInput[]
    NOT?: imagenhotelWhereInput | imagenhotelWhereInput[]
    id?: IntFilter<"imagenhotel"> | number
    url?: StringFilter<"imagenhotel"> | string
  }

  export type imagenhotelOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    _relevance?: imagenhotelOrderByRelevanceInput
  }

  export type imagenhotelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imagenhotelWhereInput | imagenhotelWhereInput[]
    OR?: imagenhotelWhereInput[]
    NOT?: imagenhotelWhereInput | imagenhotelWhereInput[]
    url?: StringFilter<"imagenhotel"> | string
  }, "id">

  export type imagenhotelOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: imagenhotelCountOrderByAggregateInput
    _avg?: imagenhotelAvgOrderByAggregateInput
    _max?: imagenhotelMaxOrderByAggregateInput
    _min?: imagenhotelMinOrderByAggregateInput
    _sum?: imagenhotelSumOrderByAggregateInput
  }

  export type imagenhotelScalarWhereWithAggregatesInput = {
    AND?: imagenhotelScalarWhereWithAggregatesInput | imagenhotelScalarWhereWithAggregatesInput[]
    OR?: imagenhotelScalarWhereWithAggregatesInput[]
    NOT?: imagenhotelScalarWhereWithAggregatesInput | imagenhotelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"imagenhotel"> | number
    url?: StringWithAggregatesFilter<"imagenhotel"> | string
  }

  export type promocionWhereInput = {
    AND?: promocionWhereInput | promocionWhereInput[]
    OR?: promocionWhereInput[]
    NOT?: promocionWhereInput | promocionWhereInput[]
    id?: IntFilter<"promocion"> | number
    precioPromo?: FloatFilter<"promocion"> | number
    inicio?: DateTimeFilter<"promocion"> | Date | string
    fin?: DateTimeFilter<"promocion"> | Date | string
    habitacionId?: IntFilter<"promocion"> | number
    habitacion?: XOR<HabitacionScalarRelationFilter, habitacionWhereInput>
  }

  export type promocionOrderByWithRelationInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    inicio?: SortOrder
    fin?: SortOrder
    habitacionId?: SortOrder
    habitacion?: habitacionOrderByWithRelationInput
  }

  export type promocionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: promocionWhereInput | promocionWhereInput[]
    OR?: promocionWhereInput[]
    NOT?: promocionWhereInput | promocionWhereInput[]
    precioPromo?: FloatFilter<"promocion"> | number
    inicio?: DateTimeFilter<"promocion"> | Date | string
    fin?: DateTimeFilter<"promocion"> | Date | string
    habitacionId?: IntFilter<"promocion"> | number
    habitacion?: XOR<HabitacionScalarRelationFilter, habitacionWhereInput>
  }, "id">

  export type promocionOrderByWithAggregationInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    inicio?: SortOrder
    fin?: SortOrder
    habitacionId?: SortOrder
    _count?: promocionCountOrderByAggregateInput
    _avg?: promocionAvgOrderByAggregateInput
    _max?: promocionMaxOrderByAggregateInput
    _min?: promocionMinOrderByAggregateInput
    _sum?: promocionSumOrderByAggregateInput
  }

  export type promocionScalarWhereWithAggregatesInput = {
    AND?: promocionScalarWhereWithAggregatesInput | promocionScalarWhereWithAggregatesInput[]
    OR?: promocionScalarWhereWithAggregatesInput[]
    NOT?: promocionScalarWhereWithAggregatesInput | promocionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"promocion"> | number
    precioPromo?: FloatWithAggregatesFilter<"promocion"> | number
    inicio?: DateTimeWithAggregatesFilter<"promocion"> | Date | string
    fin?: DateTimeWithAggregatesFilter<"promocion"> | Date | string
    habitacionId?: IntWithAggregatesFilter<"promocion"> | number
  }

  export type reservaWhereInput = {
    AND?: reservaWhereInput | reservaWhereInput[]
    OR?: reservaWhereInput[]
    NOT?: reservaWhereInput | reservaWhereInput[]
    id?: IntFilter<"reserva"> | number
    nombreCliente?: StringNullableFilter<"reserva"> | string | null
    fechaEntrada?: DateTimeFilter<"reserva"> | Date | string
    fechaSalida?: DateTimeFilter<"reserva"> | Date | string
    status?: StringFilter<"reserva"> | string
    telefono?: StringNullableFilter<"reserva"> | string | null
    email?: StringNullableFilter<"reserva"> | string | null
    clienteId?: IntNullableFilter<"reserva"> | number | null
    tipoHabitacion?: StringNullableFilter<"reserva"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, clienteWhereInput> | null
    reservahabitacion?: ReservahabitacionListRelationFilter
  }

  export type reservaOrderByWithRelationInput = {
    id?: SortOrder
    nombreCliente?: SortOrderInput | SortOrder
    fechaEntrada?: SortOrder
    fechaSalida?: SortOrder
    status?: SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    tipoHabitacion?: SortOrderInput | SortOrder
    cliente?: clienteOrderByWithRelationInput
    reservahabitacion?: reservahabitacionOrderByRelationAggregateInput
    _relevance?: reservaOrderByRelevanceInput
  }

  export type reservaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reservaWhereInput | reservaWhereInput[]
    OR?: reservaWhereInput[]
    NOT?: reservaWhereInput | reservaWhereInput[]
    nombreCliente?: StringNullableFilter<"reserva"> | string | null
    fechaEntrada?: DateTimeFilter<"reserva"> | Date | string
    fechaSalida?: DateTimeFilter<"reserva"> | Date | string
    status?: StringFilter<"reserva"> | string
    telefono?: StringNullableFilter<"reserva"> | string | null
    email?: StringNullableFilter<"reserva"> | string | null
    clienteId?: IntNullableFilter<"reserva"> | number | null
    tipoHabitacion?: StringNullableFilter<"reserva"> | string | null
    cliente?: XOR<ClienteNullableScalarRelationFilter, clienteWhereInput> | null
    reservahabitacion?: ReservahabitacionListRelationFilter
  }, "id">

  export type reservaOrderByWithAggregationInput = {
    id?: SortOrder
    nombreCliente?: SortOrderInput | SortOrder
    fechaEntrada?: SortOrder
    fechaSalida?: SortOrder
    status?: SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    tipoHabitacion?: SortOrderInput | SortOrder
    _count?: reservaCountOrderByAggregateInput
    _avg?: reservaAvgOrderByAggregateInput
    _max?: reservaMaxOrderByAggregateInput
    _min?: reservaMinOrderByAggregateInput
    _sum?: reservaSumOrderByAggregateInput
  }

  export type reservaScalarWhereWithAggregatesInput = {
    AND?: reservaScalarWhereWithAggregatesInput | reservaScalarWhereWithAggregatesInput[]
    OR?: reservaScalarWhereWithAggregatesInput[]
    NOT?: reservaScalarWhereWithAggregatesInput | reservaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reserva"> | number
    nombreCliente?: StringNullableWithAggregatesFilter<"reserva"> | string | null
    fechaEntrada?: DateTimeWithAggregatesFilter<"reserva"> | Date | string
    fechaSalida?: DateTimeWithAggregatesFilter<"reserva"> | Date | string
    status?: StringWithAggregatesFilter<"reserva"> | string
    telefono?: StringNullableWithAggregatesFilter<"reserva"> | string | null
    email?: StringNullableWithAggregatesFilter<"reserva"> | string | null
    clienteId?: IntNullableWithAggregatesFilter<"reserva"> | number | null
    tipoHabitacion?: StringNullableWithAggregatesFilter<"reserva"> | string | null
  }

  export type reservahabitacionWhereInput = {
    AND?: reservahabitacionWhereInput | reservahabitacionWhereInput[]
    OR?: reservahabitacionWhereInput[]
    NOT?: reservahabitacionWhereInput | reservahabitacionWhereInput[]
    id?: IntFilter<"reservahabitacion"> | number
    reservaId?: IntFilter<"reservahabitacion"> | number
    habitacionId?: IntFilter<"reservahabitacion"> | number
    habitacion?: XOR<HabitacionScalarRelationFilter, habitacionWhereInput>
    reserva?: XOR<ReservaScalarRelationFilter, reservaWhereInput>
  }

  export type reservahabitacionOrderByWithRelationInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
    habitacion?: habitacionOrderByWithRelationInput
    reserva?: reservaOrderByWithRelationInput
  }

  export type reservahabitacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reservahabitacionWhereInput | reservahabitacionWhereInput[]
    OR?: reservahabitacionWhereInput[]
    NOT?: reservahabitacionWhereInput | reservahabitacionWhereInput[]
    reservaId?: IntFilter<"reservahabitacion"> | number
    habitacionId?: IntFilter<"reservahabitacion"> | number
    habitacion?: XOR<HabitacionScalarRelationFilter, habitacionWhereInput>
    reserva?: XOR<ReservaScalarRelationFilter, reservaWhereInput>
  }, "id">

  export type reservahabitacionOrderByWithAggregationInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
    _count?: reservahabitacionCountOrderByAggregateInput
    _avg?: reservahabitacionAvgOrderByAggregateInput
    _max?: reservahabitacionMaxOrderByAggregateInput
    _min?: reservahabitacionMinOrderByAggregateInput
    _sum?: reservahabitacionSumOrderByAggregateInput
  }

  export type reservahabitacionScalarWhereWithAggregatesInput = {
    AND?: reservahabitacionScalarWhereWithAggregatesInput | reservahabitacionScalarWhereWithAggregatesInput[]
    OR?: reservahabitacionScalarWhereWithAggregatesInput[]
    NOT?: reservahabitacionScalarWhereWithAggregatesInput | reservahabitacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reservahabitacion"> | number
    reservaId?: IntWithAggregatesFilter<"reservahabitacion"> | number
    habitacionId?: IntWithAggregatesFilter<"reservahabitacion"> | number
  }

  export type administradorCreateInput = {
    nombre: string
    correo: string
    password: string
  }

  export type administradorUncheckedCreateInput = {
    id?: number
    nombre: string
    correo: string
    password: string
  }

  export type administradorUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type administradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type administradorCreateManyInput = {
    id?: number
    nombre: string
    correo: string
    password: string
  }

  export type administradorUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type administradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type clienteCreateInput = {
    nombre: string
    apellido: string
    telefono?: string | null
    email: string
    reserva?: reservaCreateNestedManyWithoutClienteInput
  }

  export type clienteUncheckedCreateInput = {
    id?: number
    nombre: string
    apellido: string
    telefono?: string | null
    email: string
    reserva?: reservaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type clienteUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    reserva?: reservaUpdateManyWithoutClienteNestedInput
  }

  export type clienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    reserva?: reservaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type clienteCreateManyInput = {
    id?: number
    nombre: string
    apellido: string
    telefono?: string | null
    email: string
  }

  export type clienteUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type habitacionCreateInput = {
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    promocion?: promocionCreateNestedManyWithoutHabitacionInput
    reservahabitacion?: reservahabitacionCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionUncheckedCreateInput = {
    id?: number
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    promocion?: promocionUncheckedCreateNestedManyWithoutHabitacionInput
    reservahabitacion?: reservahabitacionUncheckedCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    promocion?: promocionUpdateManyWithoutHabitacionNestedInput
    reservahabitacion?: reservahabitacionUpdateManyWithoutHabitacionNestedInput
  }

  export type habitacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    promocion?: promocionUncheckedUpdateManyWithoutHabitacionNestedInput
    reservahabitacion?: reservahabitacionUncheckedUpdateManyWithoutHabitacionNestedInput
  }

  export type habitacionCreateManyInput = {
    id?: number
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
  }

  export type habitacionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type habitacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type imagenhotelCreateInput = {
    url: string
  }

  export type imagenhotelUncheckedCreateInput = {
    id?: number
    url: string
  }

  export type imagenhotelUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagenhotelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagenhotelCreateManyInput = {
    id?: number
    url: string
  }

  export type imagenhotelUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagenhotelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type promocionCreateInput = {
    precioPromo: number
    inicio: Date | string
    fin: Date | string
    habitacion: habitacionCreateNestedOneWithoutPromocionInput
  }

  export type promocionUncheckedCreateInput = {
    id?: number
    precioPromo: number
    inicio: Date | string
    fin: Date | string
    habitacionId: number
  }

  export type promocionUpdateInput = {
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
    habitacion?: habitacionUpdateOneRequiredWithoutPromocionNestedInput
  }

  export type promocionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
    habitacionId?: IntFieldUpdateOperationsInput | number
  }

  export type promocionCreateManyInput = {
    id?: number
    precioPromo: number
    inicio: Date | string
    fin: Date | string
    habitacionId: number
  }

  export type promocionUpdateManyMutationInput = {
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promocionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
    habitacionId?: IntFieldUpdateOperationsInput | number
  }

  export type reservaCreateInput = {
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    tipoHabitacion?: string | null
    cliente?: clienteCreateNestedOneWithoutReservaInput
    reservahabitacion?: reservahabitacionCreateNestedManyWithoutReservaInput
  }

  export type reservaUncheckedCreateInput = {
    id?: number
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    clienteId?: number | null
    tipoHabitacion?: string | null
    reservahabitacion?: reservahabitacionUncheckedCreateNestedManyWithoutReservaInput
  }

  export type reservaUpdateInput = {
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: clienteUpdateOneWithoutReservaNestedInput
    reservahabitacion?: reservahabitacionUpdateManyWithoutReservaNestedInput
  }

  export type reservaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    reservahabitacion?: reservahabitacionUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type reservaCreateManyInput = {
    id?: number
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    clienteId?: number | null
    tipoHabitacion?: string | null
  }

  export type reservaUpdateManyMutationInput = {
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reservaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reservahabitacionCreateInput = {
    habitacion: habitacionCreateNestedOneWithoutReservahabitacionInput
    reserva: reservaCreateNestedOneWithoutReservahabitacionInput
  }

  export type reservahabitacionUncheckedCreateInput = {
    id?: number
    reservaId: number
    habitacionId: number
  }

  export type reservahabitacionUpdateInput = {
    habitacion?: habitacionUpdateOneRequiredWithoutReservahabitacionNestedInput
    reserva?: reservaUpdateOneRequiredWithoutReservahabitacionNestedInput
  }

  export type reservahabitacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    habitacionId?: IntFieldUpdateOperationsInput | number
  }

  export type reservahabitacionCreateManyInput = {
    id?: number
    reservaId: number
    habitacionId: number
  }

  export type reservahabitacionUpdateManyMutationInput = {

  }

  export type reservahabitacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    habitacionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type administradorOrderByRelevanceInput = {
    fields: administradorOrderByRelevanceFieldEnum | administradorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type administradorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    password?: SortOrder
  }

  export type administradorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type administradorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    password?: SortOrder
  }

  export type administradorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    password?: SortOrder
  }

  export type administradorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ReservaListRelationFilter = {
    every?: reservaWhereInput
    some?: reservaWhereInput
    none?: reservaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type reservaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clienteOrderByRelevanceInput = {
    fields: clienteOrderByRelevanceFieldEnum | clienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type clienteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
  }

  export type clienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
  }

  export type clienteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
  }

  export type clienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PromocionListRelationFilter = {
    every?: promocionWhereInput
    some?: promocionWhereInput
    none?: promocionWhereInput
  }

  export type ReservahabitacionListRelationFilter = {
    every?: reservahabitacionWhereInput
    some?: reservahabitacionWhereInput
    none?: reservahabitacionWhereInput
  }

  export type promocionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reservahabitacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type habitacionOrderByRelevanceInput = {
    fields: habitacionOrderByRelevanceFieldEnum | habitacionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type habitacionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    descripcion?: SortOrder
    imagenUrl?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type habitacionAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type habitacionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    descripcion?: SortOrder
    imagenUrl?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type habitacionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    descripcion?: SortOrder
    imagenUrl?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type habitacionSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type imagenhotelOrderByRelevanceInput = {
    fields: imagenhotelOrderByRelevanceFieldEnum | imagenhotelOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type imagenhotelCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type imagenhotelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type imagenhotelMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type imagenhotelMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type imagenhotelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HabitacionScalarRelationFilter = {
    is?: habitacionWhereInput
    isNot?: habitacionWhereInput
  }

  export type promocionCountOrderByAggregateInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    inicio?: SortOrder
    fin?: SortOrder
    habitacionId?: SortOrder
  }

  export type promocionAvgOrderByAggregateInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    habitacionId?: SortOrder
  }

  export type promocionMaxOrderByAggregateInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    inicio?: SortOrder
    fin?: SortOrder
    habitacionId?: SortOrder
  }

  export type promocionMinOrderByAggregateInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    inicio?: SortOrder
    fin?: SortOrder
    habitacionId?: SortOrder
  }

  export type promocionSumOrderByAggregateInput = {
    id?: SortOrder
    precioPromo?: SortOrder
    habitacionId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClienteNullableScalarRelationFilter = {
    is?: clienteWhereInput | null
    isNot?: clienteWhereInput | null
  }

  export type reservaOrderByRelevanceInput = {
    fields: reservaOrderByRelevanceFieldEnum | reservaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type reservaCountOrderByAggregateInput = {
    id?: SortOrder
    nombreCliente?: SortOrder
    fechaEntrada?: SortOrder
    fechaSalida?: SortOrder
    status?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    clienteId?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type reservaAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type reservaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreCliente?: SortOrder
    fechaEntrada?: SortOrder
    fechaSalida?: SortOrder
    status?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    clienteId?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type reservaMinOrderByAggregateInput = {
    id?: SortOrder
    nombreCliente?: SortOrder
    fechaEntrada?: SortOrder
    fechaSalida?: SortOrder
    status?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    clienteId?: SortOrder
    tipoHabitacion?: SortOrder
  }

  export type reservaSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ReservaScalarRelationFilter = {
    is?: reservaWhereInput
    isNot?: reservaWhereInput
  }

  export type reservahabitacionCountOrderByAggregateInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
  }

  export type reservahabitacionAvgOrderByAggregateInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
  }

  export type reservahabitacionMaxOrderByAggregateInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
  }

  export type reservahabitacionMinOrderByAggregateInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
  }

  export type reservahabitacionSumOrderByAggregateInput = {
    id?: SortOrder
    reservaId?: SortOrder
    habitacionId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type reservaCreateNestedManyWithoutClienteInput = {
    create?: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput> | reservaCreateWithoutClienteInput[] | reservaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: reservaCreateOrConnectWithoutClienteInput | reservaCreateOrConnectWithoutClienteInput[]
    createMany?: reservaCreateManyClienteInputEnvelope
    connect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
  }

  export type reservaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput> | reservaCreateWithoutClienteInput[] | reservaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: reservaCreateOrConnectWithoutClienteInput | reservaCreateOrConnectWithoutClienteInput[]
    createMany?: reservaCreateManyClienteInputEnvelope
    connect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type reservaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput> | reservaCreateWithoutClienteInput[] | reservaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: reservaCreateOrConnectWithoutClienteInput | reservaCreateOrConnectWithoutClienteInput[]
    upsert?: reservaUpsertWithWhereUniqueWithoutClienteInput | reservaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: reservaCreateManyClienteInputEnvelope
    set?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    disconnect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    delete?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    connect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    update?: reservaUpdateWithWhereUniqueWithoutClienteInput | reservaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: reservaUpdateManyWithWhereWithoutClienteInput | reservaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: reservaScalarWhereInput | reservaScalarWhereInput[]
  }

  export type reservaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput> | reservaCreateWithoutClienteInput[] | reservaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: reservaCreateOrConnectWithoutClienteInput | reservaCreateOrConnectWithoutClienteInput[]
    upsert?: reservaUpsertWithWhereUniqueWithoutClienteInput | reservaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: reservaCreateManyClienteInputEnvelope
    set?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    disconnect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    delete?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    connect?: reservaWhereUniqueInput | reservaWhereUniqueInput[]
    update?: reservaUpdateWithWhereUniqueWithoutClienteInput | reservaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: reservaUpdateManyWithWhereWithoutClienteInput | reservaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: reservaScalarWhereInput | reservaScalarWhereInput[]
  }

  export type promocionCreateNestedManyWithoutHabitacionInput = {
    create?: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput> | promocionCreateWithoutHabitacionInput[] | promocionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: promocionCreateOrConnectWithoutHabitacionInput | promocionCreateOrConnectWithoutHabitacionInput[]
    createMany?: promocionCreateManyHabitacionInputEnvelope
    connect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
  }

  export type reservahabitacionCreateNestedManyWithoutHabitacionInput = {
    create?: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput> | reservahabitacionCreateWithoutHabitacionInput[] | reservahabitacionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutHabitacionInput | reservahabitacionCreateOrConnectWithoutHabitacionInput[]
    createMany?: reservahabitacionCreateManyHabitacionInputEnvelope
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
  }

  export type promocionUncheckedCreateNestedManyWithoutHabitacionInput = {
    create?: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput> | promocionCreateWithoutHabitacionInput[] | promocionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: promocionCreateOrConnectWithoutHabitacionInput | promocionCreateOrConnectWithoutHabitacionInput[]
    createMany?: promocionCreateManyHabitacionInputEnvelope
    connect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
  }

  export type reservahabitacionUncheckedCreateNestedManyWithoutHabitacionInput = {
    create?: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput> | reservahabitacionCreateWithoutHabitacionInput[] | reservahabitacionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutHabitacionInput | reservahabitacionCreateOrConnectWithoutHabitacionInput[]
    createMany?: reservahabitacionCreateManyHabitacionInputEnvelope
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type promocionUpdateManyWithoutHabitacionNestedInput = {
    create?: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput> | promocionCreateWithoutHabitacionInput[] | promocionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: promocionCreateOrConnectWithoutHabitacionInput | promocionCreateOrConnectWithoutHabitacionInput[]
    upsert?: promocionUpsertWithWhereUniqueWithoutHabitacionInput | promocionUpsertWithWhereUniqueWithoutHabitacionInput[]
    createMany?: promocionCreateManyHabitacionInputEnvelope
    set?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    disconnect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    delete?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    connect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    update?: promocionUpdateWithWhereUniqueWithoutHabitacionInput | promocionUpdateWithWhereUniqueWithoutHabitacionInput[]
    updateMany?: promocionUpdateManyWithWhereWithoutHabitacionInput | promocionUpdateManyWithWhereWithoutHabitacionInput[]
    deleteMany?: promocionScalarWhereInput | promocionScalarWhereInput[]
  }

  export type reservahabitacionUpdateManyWithoutHabitacionNestedInput = {
    create?: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput> | reservahabitacionCreateWithoutHabitacionInput[] | reservahabitacionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutHabitacionInput | reservahabitacionCreateOrConnectWithoutHabitacionInput[]
    upsert?: reservahabitacionUpsertWithWhereUniqueWithoutHabitacionInput | reservahabitacionUpsertWithWhereUniqueWithoutHabitacionInput[]
    createMany?: reservahabitacionCreateManyHabitacionInputEnvelope
    set?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    disconnect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    delete?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    update?: reservahabitacionUpdateWithWhereUniqueWithoutHabitacionInput | reservahabitacionUpdateWithWhereUniqueWithoutHabitacionInput[]
    updateMany?: reservahabitacionUpdateManyWithWhereWithoutHabitacionInput | reservahabitacionUpdateManyWithWhereWithoutHabitacionInput[]
    deleteMany?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
  }

  export type promocionUncheckedUpdateManyWithoutHabitacionNestedInput = {
    create?: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput> | promocionCreateWithoutHabitacionInput[] | promocionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: promocionCreateOrConnectWithoutHabitacionInput | promocionCreateOrConnectWithoutHabitacionInput[]
    upsert?: promocionUpsertWithWhereUniqueWithoutHabitacionInput | promocionUpsertWithWhereUniqueWithoutHabitacionInput[]
    createMany?: promocionCreateManyHabitacionInputEnvelope
    set?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    disconnect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    delete?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    connect?: promocionWhereUniqueInput | promocionWhereUniqueInput[]
    update?: promocionUpdateWithWhereUniqueWithoutHabitacionInput | promocionUpdateWithWhereUniqueWithoutHabitacionInput[]
    updateMany?: promocionUpdateManyWithWhereWithoutHabitacionInput | promocionUpdateManyWithWhereWithoutHabitacionInput[]
    deleteMany?: promocionScalarWhereInput | promocionScalarWhereInput[]
  }

  export type reservahabitacionUncheckedUpdateManyWithoutHabitacionNestedInput = {
    create?: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput> | reservahabitacionCreateWithoutHabitacionInput[] | reservahabitacionUncheckedCreateWithoutHabitacionInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutHabitacionInput | reservahabitacionCreateOrConnectWithoutHabitacionInput[]
    upsert?: reservahabitacionUpsertWithWhereUniqueWithoutHabitacionInput | reservahabitacionUpsertWithWhereUniqueWithoutHabitacionInput[]
    createMany?: reservahabitacionCreateManyHabitacionInputEnvelope
    set?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    disconnect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    delete?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    update?: reservahabitacionUpdateWithWhereUniqueWithoutHabitacionInput | reservahabitacionUpdateWithWhereUniqueWithoutHabitacionInput[]
    updateMany?: reservahabitacionUpdateManyWithWhereWithoutHabitacionInput | reservahabitacionUpdateManyWithWhereWithoutHabitacionInput[]
    deleteMany?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
  }

  export type habitacionCreateNestedOneWithoutPromocionInput = {
    create?: XOR<habitacionCreateWithoutPromocionInput, habitacionUncheckedCreateWithoutPromocionInput>
    connectOrCreate?: habitacionCreateOrConnectWithoutPromocionInput
    connect?: habitacionWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type habitacionUpdateOneRequiredWithoutPromocionNestedInput = {
    create?: XOR<habitacionCreateWithoutPromocionInput, habitacionUncheckedCreateWithoutPromocionInput>
    connectOrCreate?: habitacionCreateOrConnectWithoutPromocionInput
    upsert?: habitacionUpsertWithoutPromocionInput
    connect?: habitacionWhereUniqueInput
    update?: XOR<XOR<habitacionUpdateToOneWithWhereWithoutPromocionInput, habitacionUpdateWithoutPromocionInput>, habitacionUncheckedUpdateWithoutPromocionInput>
  }

  export type clienteCreateNestedOneWithoutReservaInput = {
    create?: XOR<clienteCreateWithoutReservaInput, clienteUncheckedCreateWithoutReservaInput>
    connectOrCreate?: clienteCreateOrConnectWithoutReservaInput
    connect?: clienteWhereUniqueInput
  }

  export type reservahabitacionCreateNestedManyWithoutReservaInput = {
    create?: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput> | reservahabitacionCreateWithoutReservaInput[] | reservahabitacionUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutReservaInput | reservahabitacionCreateOrConnectWithoutReservaInput[]
    createMany?: reservahabitacionCreateManyReservaInputEnvelope
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
  }

  export type reservahabitacionUncheckedCreateNestedManyWithoutReservaInput = {
    create?: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput> | reservahabitacionCreateWithoutReservaInput[] | reservahabitacionUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutReservaInput | reservahabitacionCreateOrConnectWithoutReservaInput[]
    createMany?: reservahabitacionCreateManyReservaInputEnvelope
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
  }

  export type clienteUpdateOneWithoutReservaNestedInput = {
    create?: XOR<clienteCreateWithoutReservaInput, clienteUncheckedCreateWithoutReservaInput>
    connectOrCreate?: clienteCreateOrConnectWithoutReservaInput
    upsert?: clienteUpsertWithoutReservaInput
    disconnect?: clienteWhereInput | boolean
    delete?: clienteWhereInput | boolean
    connect?: clienteWhereUniqueInput
    update?: XOR<XOR<clienteUpdateToOneWithWhereWithoutReservaInput, clienteUpdateWithoutReservaInput>, clienteUncheckedUpdateWithoutReservaInput>
  }

  export type reservahabitacionUpdateManyWithoutReservaNestedInput = {
    create?: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput> | reservahabitacionCreateWithoutReservaInput[] | reservahabitacionUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutReservaInput | reservahabitacionCreateOrConnectWithoutReservaInput[]
    upsert?: reservahabitacionUpsertWithWhereUniqueWithoutReservaInput | reservahabitacionUpsertWithWhereUniqueWithoutReservaInput[]
    createMany?: reservahabitacionCreateManyReservaInputEnvelope
    set?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    disconnect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    delete?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    update?: reservahabitacionUpdateWithWhereUniqueWithoutReservaInput | reservahabitacionUpdateWithWhereUniqueWithoutReservaInput[]
    updateMany?: reservahabitacionUpdateManyWithWhereWithoutReservaInput | reservahabitacionUpdateManyWithWhereWithoutReservaInput[]
    deleteMany?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type reservahabitacionUncheckedUpdateManyWithoutReservaNestedInput = {
    create?: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput> | reservahabitacionCreateWithoutReservaInput[] | reservahabitacionUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: reservahabitacionCreateOrConnectWithoutReservaInput | reservahabitacionCreateOrConnectWithoutReservaInput[]
    upsert?: reservahabitacionUpsertWithWhereUniqueWithoutReservaInput | reservahabitacionUpsertWithWhereUniqueWithoutReservaInput[]
    createMany?: reservahabitacionCreateManyReservaInputEnvelope
    set?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    disconnect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    delete?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    connect?: reservahabitacionWhereUniqueInput | reservahabitacionWhereUniqueInput[]
    update?: reservahabitacionUpdateWithWhereUniqueWithoutReservaInput | reservahabitacionUpdateWithWhereUniqueWithoutReservaInput[]
    updateMany?: reservahabitacionUpdateManyWithWhereWithoutReservaInput | reservahabitacionUpdateManyWithWhereWithoutReservaInput[]
    deleteMany?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
  }

  export type habitacionCreateNestedOneWithoutReservahabitacionInput = {
    create?: XOR<habitacionCreateWithoutReservahabitacionInput, habitacionUncheckedCreateWithoutReservahabitacionInput>
    connectOrCreate?: habitacionCreateOrConnectWithoutReservahabitacionInput
    connect?: habitacionWhereUniqueInput
  }

  export type reservaCreateNestedOneWithoutReservahabitacionInput = {
    create?: XOR<reservaCreateWithoutReservahabitacionInput, reservaUncheckedCreateWithoutReservahabitacionInput>
    connectOrCreate?: reservaCreateOrConnectWithoutReservahabitacionInput
    connect?: reservaWhereUniqueInput
  }

  export type habitacionUpdateOneRequiredWithoutReservahabitacionNestedInput = {
    create?: XOR<habitacionCreateWithoutReservahabitacionInput, habitacionUncheckedCreateWithoutReservahabitacionInput>
    connectOrCreate?: habitacionCreateOrConnectWithoutReservahabitacionInput
    upsert?: habitacionUpsertWithoutReservahabitacionInput
    connect?: habitacionWhereUniqueInput
    update?: XOR<XOR<habitacionUpdateToOneWithWhereWithoutReservahabitacionInput, habitacionUpdateWithoutReservahabitacionInput>, habitacionUncheckedUpdateWithoutReservahabitacionInput>
  }

  export type reservaUpdateOneRequiredWithoutReservahabitacionNestedInput = {
    create?: XOR<reservaCreateWithoutReservahabitacionInput, reservaUncheckedCreateWithoutReservahabitacionInput>
    connectOrCreate?: reservaCreateOrConnectWithoutReservahabitacionInput
    upsert?: reservaUpsertWithoutReservahabitacionInput
    connect?: reservaWhereUniqueInput
    update?: XOR<XOR<reservaUpdateToOneWithWhereWithoutReservahabitacionInput, reservaUpdateWithoutReservahabitacionInput>, reservaUncheckedUpdateWithoutReservahabitacionInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type reservaCreateWithoutClienteInput = {
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    tipoHabitacion?: string | null
    reservahabitacion?: reservahabitacionCreateNestedManyWithoutReservaInput
  }

  export type reservaUncheckedCreateWithoutClienteInput = {
    id?: number
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    tipoHabitacion?: string | null
    reservahabitacion?: reservahabitacionUncheckedCreateNestedManyWithoutReservaInput
  }

  export type reservaCreateOrConnectWithoutClienteInput = {
    where: reservaWhereUniqueInput
    create: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput>
  }

  export type reservaCreateManyClienteInputEnvelope = {
    data: reservaCreateManyClienteInput | reservaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type reservaUpsertWithWhereUniqueWithoutClienteInput = {
    where: reservaWhereUniqueInput
    update: XOR<reservaUpdateWithoutClienteInput, reservaUncheckedUpdateWithoutClienteInput>
    create: XOR<reservaCreateWithoutClienteInput, reservaUncheckedCreateWithoutClienteInput>
  }

  export type reservaUpdateWithWhereUniqueWithoutClienteInput = {
    where: reservaWhereUniqueInput
    data: XOR<reservaUpdateWithoutClienteInput, reservaUncheckedUpdateWithoutClienteInput>
  }

  export type reservaUpdateManyWithWhereWithoutClienteInput = {
    where: reservaScalarWhereInput
    data: XOR<reservaUpdateManyMutationInput, reservaUncheckedUpdateManyWithoutClienteInput>
  }

  export type reservaScalarWhereInput = {
    AND?: reservaScalarWhereInput | reservaScalarWhereInput[]
    OR?: reservaScalarWhereInput[]
    NOT?: reservaScalarWhereInput | reservaScalarWhereInput[]
    id?: IntFilter<"reserva"> | number
    nombreCliente?: StringNullableFilter<"reserva"> | string | null
    fechaEntrada?: DateTimeFilter<"reserva"> | Date | string
    fechaSalida?: DateTimeFilter<"reserva"> | Date | string
    status?: StringFilter<"reserva"> | string
    telefono?: StringNullableFilter<"reserva"> | string | null
    email?: StringNullableFilter<"reserva"> | string | null
    clienteId?: IntNullableFilter<"reserva"> | number | null
    tipoHabitacion?: StringNullableFilter<"reserva"> | string | null
  }

  export type promocionCreateWithoutHabitacionInput = {
    precioPromo: number
    inicio: Date | string
    fin: Date | string
  }

  export type promocionUncheckedCreateWithoutHabitacionInput = {
    id?: number
    precioPromo: number
    inicio: Date | string
    fin: Date | string
  }

  export type promocionCreateOrConnectWithoutHabitacionInput = {
    where: promocionWhereUniqueInput
    create: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput>
  }

  export type promocionCreateManyHabitacionInputEnvelope = {
    data: promocionCreateManyHabitacionInput | promocionCreateManyHabitacionInput[]
    skipDuplicates?: boolean
  }

  export type reservahabitacionCreateWithoutHabitacionInput = {
    reserva: reservaCreateNestedOneWithoutReservahabitacionInput
  }

  export type reservahabitacionUncheckedCreateWithoutHabitacionInput = {
    id?: number
    reservaId: number
  }

  export type reservahabitacionCreateOrConnectWithoutHabitacionInput = {
    where: reservahabitacionWhereUniqueInput
    create: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput>
  }

  export type reservahabitacionCreateManyHabitacionInputEnvelope = {
    data: reservahabitacionCreateManyHabitacionInput | reservahabitacionCreateManyHabitacionInput[]
    skipDuplicates?: boolean
  }

  export type promocionUpsertWithWhereUniqueWithoutHabitacionInput = {
    where: promocionWhereUniqueInput
    update: XOR<promocionUpdateWithoutHabitacionInput, promocionUncheckedUpdateWithoutHabitacionInput>
    create: XOR<promocionCreateWithoutHabitacionInput, promocionUncheckedCreateWithoutHabitacionInput>
  }

  export type promocionUpdateWithWhereUniqueWithoutHabitacionInput = {
    where: promocionWhereUniqueInput
    data: XOR<promocionUpdateWithoutHabitacionInput, promocionUncheckedUpdateWithoutHabitacionInput>
  }

  export type promocionUpdateManyWithWhereWithoutHabitacionInput = {
    where: promocionScalarWhereInput
    data: XOR<promocionUpdateManyMutationInput, promocionUncheckedUpdateManyWithoutHabitacionInput>
  }

  export type promocionScalarWhereInput = {
    AND?: promocionScalarWhereInput | promocionScalarWhereInput[]
    OR?: promocionScalarWhereInput[]
    NOT?: promocionScalarWhereInput | promocionScalarWhereInput[]
    id?: IntFilter<"promocion"> | number
    precioPromo?: FloatFilter<"promocion"> | number
    inicio?: DateTimeFilter<"promocion"> | Date | string
    fin?: DateTimeFilter<"promocion"> | Date | string
    habitacionId?: IntFilter<"promocion"> | number
  }

  export type reservahabitacionUpsertWithWhereUniqueWithoutHabitacionInput = {
    where: reservahabitacionWhereUniqueInput
    update: XOR<reservahabitacionUpdateWithoutHabitacionInput, reservahabitacionUncheckedUpdateWithoutHabitacionInput>
    create: XOR<reservahabitacionCreateWithoutHabitacionInput, reservahabitacionUncheckedCreateWithoutHabitacionInput>
  }

  export type reservahabitacionUpdateWithWhereUniqueWithoutHabitacionInput = {
    where: reservahabitacionWhereUniqueInput
    data: XOR<reservahabitacionUpdateWithoutHabitacionInput, reservahabitacionUncheckedUpdateWithoutHabitacionInput>
  }

  export type reservahabitacionUpdateManyWithWhereWithoutHabitacionInput = {
    where: reservahabitacionScalarWhereInput
    data: XOR<reservahabitacionUpdateManyMutationInput, reservahabitacionUncheckedUpdateManyWithoutHabitacionInput>
  }

  export type reservahabitacionScalarWhereInput = {
    AND?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
    OR?: reservahabitacionScalarWhereInput[]
    NOT?: reservahabitacionScalarWhereInput | reservahabitacionScalarWhereInput[]
    id?: IntFilter<"reservahabitacion"> | number
    reservaId?: IntFilter<"reservahabitacion"> | number
    habitacionId?: IntFilter<"reservahabitacion"> | number
  }

  export type habitacionCreateWithoutPromocionInput = {
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    reservahabitacion?: reservahabitacionCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionUncheckedCreateWithoutPromocionInput = {
    id?: number
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    reservahabitacion?: reservahabitacionUncheckedCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionCreateOrConnectWithoutPromocionInput = {
    where: habitacionWhereUniqueInput
    create: XOR<habitacionCreateWithoutPromocionInput, habitacionUncheckedCreateWithoutPromocionInput>
  }

  export type habitacionUpsertWithoutPromocionInput = {
    update: XOR<habitacionUpdateWithoutPromocionInput, habitacionUncheckedUpdateWithoutPromocionInput>
    create: XOR<habitacionCreateWithoutPromocionInput, habitacionUncheckedCreateWithoutPromocionInput>
    where?: habitacionWhereInput
  }

  export type habitacionUpdateToOneWithWhereWithoutPromocionInput = {
    where?: habitacionWhereInput
    data: XOR<habitacionUpdateWithoutPromocionInput, habitacionUncheckedUpdateWithoutPromocionInput>
  }

  export type habitacionUpdateWithoutPromocionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    reservahabitacion?: reservahabitacionUpdateManyWithoutHabitacionNestedInput
  }

  export type habitacionUncheckedUpdateWithoutPromocionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    reservahabitacion?: reservahabitacionUncheckedUpdateManyWithoutHabitacionNestedInput
  }

  export type clienteCreateWithoutReservaInput = {
    nombre: string
    apellido: string
    telefono?: string | null
    email: string
  }

  export type clienteUncheckedCreateWithoutReservaInput = {
    id?: number
    nombre: string
    apellido: string
    telefono?: string | null
    email: string
  }

  export type clienteCreateOrConnectWithoutReservaInput = {
    where: clienteWhereUniqueInput
    create: XOR<clienteCreateWithoutReservaInput, clienteUncheckedCreateWithoutReservaInput>
  }

  export type reservahabitacionCreateWithoutReservaInput = {
    habitacion: habitacionCreateNestedOneWithoutReservahabitacionInput
  }

  export type reservahabitacionUncheckedCreateWithoutReservaInput = {
    id?: number
    habitacionId: number
  }

  export type reservahabitacionCreateOrConnectWithoutReservaInput = {
    where: reservahabitacionWhereUniqueInput
    create: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput>
  }

  export type reservahabitacionCreateManyReservaInputEnvelope = {
    data: reservahabitacionCreateManyReservaInput | reservahabitacionCreateManyReservaInput[]
    skipDuplicates?: boolean
  }

  export type clienteUpsertWithoutReservaInput = {
    update: XOR<clienteUpdateWithoutReservaInput, clienteUncheckedUpdateWithoutReservaInput>
    create: XOR<clienteCreateWithoutReservaInput, clienteUncheckedCreateWithoutReservaInput>
    where?: clienteWhereInput
  }

  export type clienteUpdateToOneWithWhereWithoutReservaInput = {
    where?: clienteWhereInput
    data: XOR<clienteUpdateWithoutReservaInput, clienteUncheckedUpdateWithoutReservaInput>
  }

  export type clienteUpdateWithoutReservaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type clienteUncheckedUpdateWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type reservahabitacionUpsertWithWhereUniqueWithoutReservaInput = {
    where: reservahabitacionWhereUniqueInput
    update: XOR<reservahabitacionUpdateWithoutReservaInput, reservahabitacionUncheckedUpdateWithoutReservaInput>
    create: XOR<reservahabitacionCreateWithoutReservaInput, reservahabitacionUncheckedCreateWithoutReservaInput>
  }

  export type reservahabitacionUpdateWithWhereUniqueWithoutReservaInput = {
    where: reservahabitacionWhereUniqueInput
    data: XOR<reservahabitacionUpdateWithoutReservaInput, reservahabitacionUncheckedUpdateWithoutReservaInput>
  }

  export type reservahabitacionUpdateManyWithWhereWithoutReservaInput = {
    where: reservahabitacionScalarWhereInput
    data: XOR<reservahabitacionUpdateManyMutationInput, reservahabitacionUncheckedUpdateManyWithoutReservaInput>
  }

  export type habitacionCreateWithoutReservahabitacionInput = {
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    promocion?: promocionCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionUncheckedCreateWithoutReservahabitacionInput = {
    id?: number
    nombre: string
    precio: number
    descripcion?: string | null
    imagenUrl: string
    tipoHabitacion?: string | null
    promocion?: promocionUncheckedCreateNestedManyWithoutHabitacionInput
  }

  export type habitacionCreateOrConnectWithoutReservahabitacionInput = {
    where: habitacionWhereUniqueInput
    create: XOR<habitacionCreateWithoutReservahabitacionInput, habitacionUncheckedCreateWithoutReservahabitacionInput>
  }

  export type reservaCreateWithoutReservahabitacionInput = {
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    tipoHabitacion?: string | null
    cliente?: clienteCreateNestedOneWithoutReservaInput
  }

  export type reservaUncheckedCreateWithoutReservahabitacionInput = {
    id?: number
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    clienteId?: number | null
    tipoHabitacion?: string | null
  }

  export type reservaCreateOrConnectWithoutReservahabitacionInput = {
    where: reservaWhereUniqueInput
    create: XOR<reservaCreateWithoutReservahabitacionInput, reservaUncheckedCreateWithoutReservahabitacionInput>
  }

  export type habitacionUpsertWithoutReservahabitacionInput = {
    update: XOR<habitacionUpdateWithoutReservahabitacionInput, habitacionUncheckedUpdateWithoutReservahabitacionInput>
    create: XOR<habitacionCreateWithoutReservahabitacionInput, habitacionUncheckedCreateWithoutReservahabitacionInput>
    where?: habitacionWhereInput
  }

  export type habitacionUpdateToOneWithWhereWithoutReservahabitacionInput = {
    where?: habitacionWhereInput
    data: XOR<habitacionUpdateWithoutReservahabitacionInput, habitacionUncheckedUpdateWithoutReservahabitacionInput>
  }

  export type habitacionUpdateWithoutReservahabitacionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    promocion?: promocionUpdateManyWithoutHabitacionNestedInput
  }

  export type habitacionUncheckedUpdateWithoutReservahabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    imagenUrl?: StringFieldUpdateOperationsInput | string
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    promocion?: promocionUncheckedUpdateManyWithoutHabitacionNestedInput
  }

  export type reservaUpsertWithoutReservahabitacionInput = {
    update: XOR<reservaUpdateWithoutReservahabitacionInput, reservaUncheckedUpdateWithoutReservahabitacionInput>
    create: XOR<reservaCreateWithoutReservahabitacionInput, reservaUncheckedCreateWithoutReservahabitacionInput>
    where?: reservaWhereInput
  }

  export type reservaUpdateToOneWithWhereWithoutReservahabitacionInput = {
    where?: reservaWhereInput
    data: XOR<reservaUpdateWithoutReservahabitacionInput, reservaUncheckedUpdateWithoutReservahabitacionInput>
  }

  export type reservaUpdateWithoutReservahabitacionInput = {
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: clienteUpdateOneWithoutReservaNestedInput
  }

  export type reservaUncheckedUpdateWithoutReservahabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reservaCreateManyClienteInput = {
    id?: number
    nombreCliente?: string | null
    fechaEntrada: Date | string
    fechaSalida: Date | string
    status?: string
    telefono?: string | null
    email?: string | null
    tipoHabitacion?: string | null
  }

  export type reservaUpdateWithoutClienteInput = {
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    reservahabitacion?: reservahabitacionUpdateManyWithoutReservaNestedInput
  }

  export type reservaUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
    reservahabitacion?: reservahabitacionUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type reservaUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCliente?: NullableStringFieldUpdateOperationsInput | string | null
    fechaEntrada?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSalida?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tipoHabitacion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type promocionCreateManyHabitacionInput = {
    id?: number
    precioPromo: number
    inicio: Date | string
    fin: Date | string
  }

  export type reservahabitacionCreateManyHabitacionInput = {
    id?: number
    reservaId: number
  }

  export type promocionUpdateWithoutHabitacionInput = {
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promocionUncheckedUpdateWithoutHabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promocionUncheckedUpdateManyWithoutHabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    precioPromo?: FloatFieldUpdateOperationsInput | number
    inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reservahabitacionUpdateWithoutHabitacionInput = {
    reserva?: reservaUpdateOneRequiredWithoutReservahabitacionNestedInput
  }

  export type reservahabitacionUncheckedUpdateWithoutHabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
  }

  export type reservahabitacionUncheckedUpdateManyWithoutHabitacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
  }

  export type reservahabitacionCreateManyReservaInput = {
    id?: number
    habitacionId: number
  }

  export type reservahabitacionUpdateWithoutReservaInput = {
    habitacion?: habitacionUpdateOneRequiredWithoutReservahabitacionNestedInput
  }

  export type reservahabitacionUncheckedUpdateWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    habitacionId?: IntFieldUpdateOperationsInput | number
  }

  export type reservahabitacionUncheckedUpdateManyWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    habitacionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}